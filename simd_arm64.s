//go:build !noasm && arm64
// Code generated by gocc -- DO NOT EDIT.

#include "textflag.h"

TEXT ·_and(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB0_7       // <--                                  // cbz	x8, .LBB0_7
	CMP  $4, R8           // <--                                  // cmp	x8, #4
	BCC  LBB0_4           // <--                                  // b.lo	.LBB0_4
	LSL  $3, R8, R9       // <--                                  // lsl	x9, x8, #3
	ADD  R9, R3, R10      // <--                                  // add	x10, x3, x9
	CMP  R0, R10          // <--                                  // cmp	x10, x0
	BLS  LBB0_8           // <--                                  // b.ls	.LBB0_8
	ADD  R9, R0, R9       // <--                                  // add	x9, x0, x9
	CMP  R3, R9           // <--                                  // cmp	x9, x3
	BLS  LBB0_8           // <--                                  // b.ls	.LBB0_8

LBB0_4:
	MOVD ZR, R9 // <--                                  // mov	x9, xzr

LBB0_5:
	LSL $3, R9, R10  // <--                                  // lsl	x10, x9, #3
	SUB R9, R8, R8   // <--                                  // sub	x8, x8, x9
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB0_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	AND  R11, R12, R11 // <--                                  // and	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB0_6        // <--                                  // b.ne	.LBB0_6

LBB0_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB0_8:
	AND  $-4, R8, R9  // <--                                  // and	x9, x8, #0xfffffffffffffffc
	ADD  $16, R3, R10 // <--                                  // add	x10, x3, #16
	ADD  $16, R0, R11 // <--                                  // add	x11, x0, #16
	MOVD R9, R12      // <--                                  // mov	x12, x9

LBB0_9:
	WORD $0xad7f8540   // FLDPQ -16(R10), (F0, F1)             // ldp	q0, q1, [x10, #-16]
	ADD  $32, R10, R10 // <--                                  // add	x10, x10, #32
	SUBS $4, R12, R12  // <--                                  // subs	x12, x12, #4
	WORD $0xad7f8d62   // FLDPQ -16(R11), (F2, F3)             // ldp	q2, q3, [x11, #-16]
	WORD $0x4e201c40   // VAND V0.B16, V2.B16, V0.B16          // and	v0.16b, v2.16b, v0.16b
	WORD $0x4e211c61   // VAND V1.B16, V3.B16, V1.B16          // and	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8560   // FSTPQ (F0, F1), -16(R11)             // stp	q0, q1, [x11, #-16]
	ADD  $32, R11, R11 // <--                                  // add	x11, x11, #32
	BNE  LBB0_9        // <--                                  // b.ne	.LBB0_9
	CMP  R9, R8        // <--                                  // cmp	x8, x9
	BEQ  LBB0_7        // <--                                  // b.eq	.LBB0_7
	JMP  LBB0_5        // <--                                  // b	.LBB0_5

TEXT ·_andn(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB1_7       // <--                                  // cbz	x8, .LBB1_7
	CMP  $4, R8           // <--                                  // cmp	x8, #4
	BCC  LBB1_4           // <--                                  // b.lo	.LBB1_4
	LSL  $3, R8, R9       // <--                                  // lsl	x9, x8, #3
	ADD  R9, R3, R10      // <--                                  // add	x10, x3, x9
	CMP  R0, R10          // <--                                  // cmp	x10, x0
	BLS  LBB1_8           // <--                                  // b.ls	.LBB1_8
	ADD  R9, R0, R9       // <--                                  // add	x9, x0, x9
	CMP  R3, R9           // <--                                  // cmp	x9, x3
	BLS  LBB1_8           // <--                                  // b.ls	.LBB1_8

LBB1_4:
	MOVD ZR, R9 // <--                                  // mov	x9, xzr

LBB1_5:
	LSL $3, R9, R10  // <--                                  // lsl	x10, x9, #3
	SUB R9, R8, R8   // <--                                  // sub	x8, x8, x9
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB1_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	BIC  R11, R12, R11 // <--                                  // bic	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB1_6        // <--                                  // b.ne	.LBB1_6

LBB1_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB1_8:
	AND  $-4, R8, R9  // <--                                  // and	x9, x8, #0xfffffffffffffffc
	ADD  $16, R3, R10 // <--                                  // add	x10, x3, #16
	ADD  $16, R0, R11 // <--                                  // add	x11, x0, #16
	MOVD R9, R12      // <--                                  // mov	x12, x9

LBB1_9:
	WORD $0xad7f8540   // FLDPQ -16(R10), (F0, F1)             // ldp	q0, q1, [x10, #-16]
	ADD  $32, R10, R10 // <--                                  // add	x10, x10, #32
	SUBS $4, R12, R12  // <--                                  // subs	x12, x12, #4
	WORD $0xad7f8d62   // FLDPQ -16(R11), (F2, F3)             // ldp	q2, q3, [x11, #-16]
	WORD $0x4e601c40   // VBIC V0.B16, V2.B16, V0.B16          // bic	v0.16b, v2.16b, v0.16b
	WORD $0x4e611c61   // VBIC V1.B16, V3.B16, V1.B16          // bic	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8560   // FSTPQ (F0, F1), -16(R11)             // stp	q0, q1, [x11, #-16]
	ADD  $32, R11, R11 // <--                                  // add	x11, x11, #32
	BNE  LBB1_9        // <--                                  // b.ne	.LBB1_9
	CMP  R9, R8        // <--                                  // cmp	x8, x9
	BEQ  LBB1_7        // <--                                  // b.eq	.LBB1_7
	JMP  LBB1_5        // <--                                  // b	.LBB1_5

TEXT ·_or(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB2_7       // <--                                  // cbz	x8, .LBB2_7
	CMP  $4, R8           // <--                                  // cmp	x8, #4
	BCC  LBB2_4           // <--                                  // b.lo	.LBB2_4
	LSL  $3, R8, R9       // <--                                  // lsl	x9, x8, #3
	ADD  R9, R3, R10      // <--                                  // add	x10, x3, x9
	CMP  R0, R10          // <--                                  // cmp	x10, x0
	BLS  LBB2_8           // <--                                  // b.ls	.LBB2_8
	ADD  R9, R0, R9       // <--                                  // add	x9, x0, x9
	CMP  R3, R9           // <--                                  // cmp	x9, x3
	BLS  LBB2_8           // <--                                  // b.ls	.LBB2_8

LBB2_4:
	MOVD ZR, R9 // <--                                  // mov	x9, xzr

LBB2_5:
	LSL $3, R9, R10  // <--                                  // lsl	x10, x9, #3
	SUB R9, R8, R8   // <--                                  // sub	x8, x8, x9
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB2_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	ORR  R11, R12, R11 // <--                                  // orr	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB2_6        // <--                                  // b.ne	.LBB2_6

LBB2_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB2_8:
	AND  $-4, R8, R9  // <--                                  // and	x9, x8, #0xfffffffffffffffc
	ADD  $16, R3, R10 // <--                                  // add	x10, x3, #16
	ADD  $16, R0, R11 // <--                                  // add	x11, x0, #16
	MOVD R9, R12      // <--                                  // mov	x12, x9

LBB2_9:
	WORD $0xad7f8540   // FLDPQ -16(R10), (F0, F1)             // ldp	q0, q1, [x10, #-16]
	ADD  $32, R10, R10 // <--                                  // add	x10, x10, #32
	SUBS $4, R12, R12  // <--                                  // subs	x12, x12, #4
	WORD $0xad7f8d62   // FLDPQ -16(R11), (F2, F3)             // ldp	q2, q3, [x11, #-16]
	WORD $0x4ea01c40   // VORR V0.B16, V2.B16, V0.B16          // orr	v0.16b, v2.16b, v0.16b
	WORD $0x4ea11c61   // VORR V1.B16, V3.B16, V1.B16          // orr	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8560   // FSTPQ (F0, F1), -16(R11)             // stp	q0, q1, [x11, #-16]
	ADD  $32, R11, R11 // <--                                  // add	x11, x11, #32
	BNE  LBB2_9        // <--                                  // b.ne	.LBB2_9
	CMP  R9, R8        // <--                                  // cmp	x8, x9
	BEQ  LBB2_7        // <--                                  // b.eq	.LBB2_7
	JMP  LBB2_5        // <--                                  // b	.LBB2_5

TEXT ·_xor(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB3_7       // <--                                  // cbz	x8, .LBB3_7
	CMP  $4, R8           // <--                                  // cmp	x8, #4
	BCC  LBB3_4           // <--                                  // b.lo	.LBB3_4
	LSL  $3, R8, R9       // <--                                  // lsl	x9, x8, #3
	ADD  R9, R3, R10      // <--                                  // add	x10, x3, x9
	CMP  R0, R10          // <--                                  // cmp	x10, x0
	BLS  LBB3_8           // <--                                  // b.ls	.LBB3_8
	ADD  R9, R0, R9       // <--                                  // add	x9, x0, x9
	CMP  R3, R9           // <--                                  // cmp	x9, x3
	BLS  LBB3_8           // <--                                  // b.ls	.LBB3_8

LBB3_4:
	MOVD ZR, R9 // <--                                  // mov	x9, xzr

LBB3_5:
	LSL $3, R9, R10  // <--                                  // lsl	x10, x9, #3
	SUB R9, R8, R8   // <--                                  // sub	x8, x8, x9
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB3_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	EOR  R11, R12, R11 // <--                                  // eor	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB3_6        // <--                                  // b.ne	.LBB3_6

LBB3_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB3_8:
	AND  $-4, R8, R9  // <--                                  // and	x9, x8, #0xfffffffffffffffc
	ADD  $16, R3, R10 // <--                                  // add	x10, x3, #16
	ADD  $16, R0, R11 // <--                                  // add	x11, x0, #16
	MOVD R9, R12      // <--                                  // mov	x12, x9

LBB3_9:
	WORD $0xad7f8540   // FLDPQ -16(R10), (F0, F1)             // ldp	q0, q1, [x10, #-16]
	ADD  $32, R10, R10 // <--                                  // add	x10, x10, #32
	SUBS $4, R12, R12  // <--                                  // subs	x12, x12, #4
	WORD $0xad7f8d62   // FLDPQ -16(R11), (F2, F3)             // ldp	q2, q3, [x11, #-16]
	WORD $0x6e201c40   // VEOR V0.B16, V2.B16, V0.B16          // eor	v0.16b, v2.16b, v0.16b
	WORD $0x6e211c61   // VEOR V1.B16, V3.B16, V1.B16          // eor	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8560   // FSTPQ (F0, F1), -16(R11)             // stp	q0, q1, [x11, #-16]
	ADD  $32, R11, R11 // <--                                  // add	x11, x11, #32
	BNE  LBB3_9        // <--                                  // b.ne	.LBB3_9
	CMP  R9, R8        // <--                                  // cmp	x8, x9
	BEQ  LBB3_7        // <--                                  // b.eq	.LBB3_7
	JMP  LBB3_5        // <--                                  // b	.LBB3_5

TEXT ·_and_many(SB), 0, $80-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                      // (skipped)                            // stp	x29, x30, [sp, #-80]!
	ANDS $4294967295, R2, R8 // <--                                  // ands	x8, x2, #0xffffffff
	STP  (R26, R25), 16(RSP) // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP) // <--                                  // stp	x24, x23, [sp, #32]
	NOP                      // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP) // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP) // <--                                  // stp	x20, x19, [sp, #64]
	BEQ  LBB4_18             // <--                                  // b.eq	.LBB4_18
	LSR  $32, R2, R9         // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB4_18         // <--                                  // cbz	x9, .LBB4_18
	MOVD ZR, R10             // <--                                  // mov	x10, xzr
	MOVD ZR, R11             // <--                                  // mov	x11, xzr
	MOVD ZR, R16             // <--                                  // mov	x16, xzr
	ADD  $16, R0, R12        // <--                                  // add	x12, x0, #16
	MOVW $512, R13           // <--                                  // mov	w13, #512
	MOVW $16, R14            // <--                                  // mov	w14, #16
	MOVD R0, R15             // <--                                  // mov	x15, x0
	JMP  LBB4_4              // <--                                  // b	.LBB4_4

LBB4_3:
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R11, R11       // <--                                  // add	x11, x11, #1
	ADD  $(1<<12), R14, R14 // <--                                  // add	x14, x14, #1, lsl #12
	ADD  $(1<<12), R12, R12 // <--                                  // add	x12, x12, #1, lsl #12
	ADD  $(1<<12), R15, R15 // <--                                  // add	x15, x15, #1, lsl #12
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	MOVD R17, R16           // <--                                  // mov	x16, x17
	CMP  R8, R17            // <--                                  // cmp	x17, x8
	BCS  LBB4_18            // <--                                  // b.hs	.LBB4_18

LBB4_4:
	CMP  R8, R13         // <--                                  // cmp	x13, x8
	ADD  $512, R16, R17  // <--                                  // add	x17, x16, #512
	CSEL LO, R13, R8, R2 // <--                                  // csel	x2, x13, x8, lo
	CMP  R8, R17         // <--                                  // cmp	x17, x8
	CSEL LO, R17, R8, R3 // <--                                  // csel	x3, x17, x8, lo
	CMP  R3, R16         // <--                                  // cmp	x16, x3
	BCS  LBB4_3          // <--                                  // b.hs	.LBB4_3
	LSL  $9, R11, R5     // <--                                  // lsl	x5, x11, #9
	SUB  R5, R2, R20     // <--                                  // sub	x20, x2, x5
	CMP  $4, R20         // <--                                  // cmp	x20, #4
	BCS  LBB4_10         // <--                                  // b.hs	.LBB4_10
	MOVD ZR, R3          // <--                                  // mov	x3, xzr

LBB4_7:
	WORD $0xf8637824 // MOVD (R1)(R3<<3), R4                 // ldr	x4, [x1, x3, lsl #3]
	MOVD R15, R5     // <--                                  // mov	x5, x15
	MOVD R2, R6      // <--                                  // mov	x6, x2
	ADD  R10, R4, R4 // <--                                  // add	x4, x4, x10

LBB4_8:
	WORD $0xf8408487 // MOVD.P 8(R4), R7                     // ldr	x7, [x4], #8
	WORD $0xf94000b3 // MOVD (R5), R19                       // ldr	x19, [x5]
	SUB  $1, R6, R6  // <--                                  // sub	x6, x6, #1
	CMP  R6, R16     // <--                                  // cmp	x16, x6
	AND  R7, R19, R7 // <--                                  // and	x7, x19, x7
	WORD $0xf80084a7 // MOVD.P R7, 8(R5)                     // str	x7, [x5], #8
	BNE  LBB4_8      // <--                                  // b.ne	.LBB4_8
	ADD  $1, R3, R3  // <--                                  // add	x3, x3, #1
	CMP  R9, R3      // <--                                  // cmp	x3, x9
	BNE  LBB4_7      // <--                                  // b.ne	.LBB4_7
	JMP  LBB4_3      // <--                                  // b	.LBB4_3

LBB4_10:
	MVN  R5, R6              // <--                                  // mvn	x6, x5
	LSL  $12, R11, R5        // <--                                  // lsl	x5, x11, #12
	ADD  R6, R2, R7          // <--                                  // add	x7, x2, x6
	ADD  R5, R0, R6          // <--                                  // add	x6, x0, x5
	LSL  $3, R7, R21         // <--                                  // lsl	x21, x7, #3
	AND  $3, R2, R7          // <--                                  // and	x7, x2, #0x3
	ADD  R21, R6, R19        // <--                                  // add	x19, x6, x21
	SUB  R7, R20, R20        // <--                                  // sub	x20, x20, x7
	MOVD ZR, R3              // <--                                  // mov	x3, xzr
	AND  $4294967292, R2, R4 // <--                                  // and	x4, x2, #0xfffffffc
	ADD  $8, R19, R19        // <--                                  // add	x19, x19, #8
	ADD  R20, R16, R20       // <--                                  // add	x20, x16, x20
	ADD  R21, R5, R21        // <--                                  // add	x21, x5, x21
	JMP  LBB4_12             // <--                                  // b	.LBB4_12

LBB4_11:
	ADD $1, R3, R3 // <--                                  // add	x3, x3, #1
	CMP R9, R3     // <--                                  // cmp	x3, x9
	BEQ LBB4_3     // <--                                  // b.eq	.LBB4_3

LBB4_12:
	WORD $0xf8637836      // MOVD (R1)(R3<<3), R22                // ldr	x22, [x1, x3, lsl #3]
	ADD  R21, R22, R23    // <--                                  // add	x23, x22, x21
	ADD  R5, R22, R24     // <--                                  // add	x24, x22, x5
	ADD  $8, R23, R23     // <--                                  // add	x23, x23, #8
	CMP  R23, R6          // <--                                  // cmp	x6, x23
	CCMP LO, R24, R19, $2 // <--                                  // ccmp	x24, x19, #2, lo
	MOVD R16, R24         // <--                                  // mov	x24, x16
	BCC  LBB4_16          // <--                                  // b.lo	.LBB4_16
	ADD  R14, R22, R23    // <--                                  // add	x23, x22, x14
	MOVD R12, R24         // <--                                  // mov	x24, x12
	MOVD R4, R25          // <--                                  // mov	x25, x4

LBB4_14:
	WORD $0xad7f86e0   // FLDPQ -16(R23), (F0, F1)             // ldp	q0, q1, [x23, #-16]
	SUB  $4, R25, R25  // <--                                  // sub	x25, x25, #4
	ADD  $32, R23, R23 // <--                                  // add	x23, x23, #32
	CMP  R25, R16      // <--                                  // cmp	x16, x25
	WORD $0xad7f8f02   // FLDPQ -16(R24), (F2, F3)             // ldp	q2, q3, [x24, #-16]
	WORD $0x4e201c40   // VAND V0.B16, V2.B16, V0.B16          // and	v0.16b, v2.16b, v0.16b
	WORD $0x4e211c61   // VAND V1.B16, V3.B16, V1.B16          // and	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8700   // FSTPQ (F0, F1), -16(R24)             // stp	q0, q1, [x24, #-16]
	ADD  $32, R24, R24 // <--                                  // add	x24, x24, #32
	BNE  LBB4_14       // <--                                  // b.ne	.LBB4_14
	MOVD R20, R24      // <--                                  // mov	x24, x20
	CBZ  R7, LBB4_11   // <--                                  // cbz	x7, .LBB4_11

LBB4_16:
	LSL $3, R24, R25  // <--                                  // lsl	x25, x24, #3
	SUB R24, R2, R23  // <--                                  // sub	x23, x2, x24
	ADD R25, R0, R24  // <--                                  // add	x24, x0, x25
	ADD R25, R22, R22 // <--                                  // add	x22, x22, x25

LBB4_17:
	WORD $0xf84086d9   // MOVD.P 8(R22), R25                   // ldr	x25, [x22], #8
	WORD $0xf940031a   // MOVD (R24), R26                      // ldr	x26, [x24]
	SUBS $1, R23, R23  // <--                                  // subs	x23, x23, #1
	AND  R25, R26, R25 // <--                                  // and	x25, x26, x25
	WORD $0xf8008719   // MOVD.P R25, 8(R24)                   // str	x25, [x24], #8
	BNE  LBB4_17       // <--                                  // b.ne	.LBB4_17
	JMP  LBB4_11       // <--                                  // b	.LBB4_11

LBB4_18:
	LDP 64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP 48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP 32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP 16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                     // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                     // <--                                  // ret

TEXT ·_andn_many(SB), 0, $80-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                      // (skipped)                            // stp	x29, x30, [sp, #-80]!
	ANDS $4294967295, R2, R8 // <--                                  // ands	x8, x2, #0xffffffff
	STP  (R26, R25), 16(RSP) // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP) // <--                                  // stp	x24, x23, [sp, #32]
	NOP                      // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP) // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP) // <--                                  // stp	x20, x19, [sp, #64]
	BEQ  LBB5_18             // <--                                  // b.eq	.LBB5_18
	LSR  $32, R2, R9         // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB5_18         // <--                                  // cbz	x9, .LBB5_18
	MOVD ZR, R10             // <--                                  // mov	x10, xzr
	MOVD ZR, R11             // <--                                  // mov	x11, xzr
	MOVD ZR, R16             // <--                                  // mov	x16, xzr
	ADD  $16, R0, R12        // <--                                  // add	x12, x0, #16
	MOVW $512, R13           // <--                                  // mov	w13, #512
	MOVW $16, R14            // <--                                  // mov	w14, #16
	MOVD R0, R15             // <--                                  // mov	x15, x0
	JMP  LBB5_4              // <--                                  // b	.LBB5_4

LBB5_3:
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R11, R11       // <--                                  // add	x11, x11, #1
	ADD  $(1<<12), R14, R14 // <--                                  // add	x14, x14, #1, lsl #12
	ADD  $(1<<12), R12, R12 // <--                                  // add	x12, x12, #1, lsl #12
	ADD  $(1<<12), R15, R15 // <--                                  // add	x15, x15, #1, lsl #12
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	MOVD R17, R16           // <--                                  // mov	x16, x17
	CMP  R8, R17            // <--                                  // cmp	x17, x8
	BCS  LBB5_18            // <--                                  // b.hs	.LBB5_18

LBB5_4:
	CMP  R8, R13         // <--                                  // cmp	x13, x8
	ADD  $512, R16, R17  // <--                                  // add	x17, x16, #512
	CSEL LO, R13, R8, R2 // <--                                  // csel	x2, x13, x8, lo
	CMP  R8, R17         // <--                                  // cmp	x17, x8
	CSEL LO, R17, R8, R3 // <--                                  // csel	x3, x17, x8, lo
	CMP  R3, R16         // <--                                  // cmp	x16, x3
	BCS  LBB5_3          // <--                                  // b.hs	.LBB5_3
	LSL  $9, R11, R5     // <--                                  // lsl	x5, x11, #9
	SUB  R5, R2, R20     // <--                                  // sub	x20, x2, x5
	CMP  $4, R20         // <--                                  // cmp	x20, #4
	BCS  LBB5_10         // <--                                  // b.hs	.LBB5_10
	MOVD ZR, R3          // <--                                  // mov	x3, xzr

LBB5_7:
	WORD $0xf8637824 // MOVD (R1)(R3<<3), R4                 // ldr	x4, [x1, x3, lsl #3]
	MOVD R15, R5     // <--                                  // mov	x5, x15
	MOVD R2, R6      // <--                                  // mov	x6, x2
	ADD  R10, R4, R4 // <--                                  // add	x4, x4, x10

LBB5_8:
	WORD $0xf8408487 // MOVD.P 8(R4), R7                     // ldr	x7, [x4], #8
	WORD $0xf94000b3 // MOVD (R5), R19                       // ldr	x19, [x5]
	SUB  $1, R6, R6  // <--                                  // sub	x6, x6, #1
	CMP  R6, R16     // <--                                  // cmp	x16, x6
	BIC  R7, R19, R7 // <--                                  // bic	x7, x19, x7
	WORD $0xf80084a7 // MOVD.P R7, 8(R5)                     // str	x7, [x5], #8
	BNE  LBB5_8      // <--                                  // b.ne	.LBB5_8
	ADD  $1, R3, R3  // <--                                  // add	x3, x3, #1
	CMP  R9, R3      // <--                                  // cmp	x3, x9
	BNE  LBB5_7      // <--                                  // b.ne	.LBB5_7
	JMP  LBB5_3      // <--                                  // b	.LBB5_3

LBB5_10:
	MVN  R5, R6              // <--                                  // mvn	x6, x5
	LSL  $12, R11, R5        // <--                                  // lsl	x5, x11, #12
	ADD  R6, R2, R7          // <--                                  // add	x7, x2, x6
	ADD  R5, R0, R6          // <--                                  // add	x6, x0, x5
	LSL  $3, R7, R21         // <--                                  // lsl	x21, x7, #3
	AND  $3, R2, R7          // <--                                  // and	x7, x2, #0x3
	ADD  R21, R6, R19        // <--                                  // add	x19, x6, x21
	SUB  R7, R20, R20        // <--                                  // sub	x20, x20, x7
	MOVD ZR, R3              // <--                                  // mov	x3, xzr
	AND  $4294967292, R2, R4 // <--                                  // and	x4, x2, #0xfffffffc
	ADD  $8, R19, R19        // <--                                  // add	x19, x19, #8
	ADD  R20, R16, R20       // <--                                  // add	x20, x16, x20
	ADD  R21, R5, R21        // <--                                  // add	x21, x5, x21
	JMP  LBB5_12             // <--                                  // b	.LBB5_12

LBB5_11:
	ADD $1, R3, R3 // <--                                  // add	x3, x3, #1
	CMP R9, R3     // <--                                  // cmp	x3, x9
	BEQ LBB5_3     // <--                                  // b.eq	.LBB5_3

LBB5_12:
	WORD $0xf8637836      // MOVD (R1)(R3<<3), R22                // ldr	x22, [x1, x3, lsl #3]
	ADD  R21, R22, R23    // <--                                  // add	x23, x22, x21
	ADD  R5, R22, R24     // <--                                  // add	x24, x22, x5
	ADD  $8, R23, R23     // <--                                  // add	x23, x23, #8
	CMP  R23, R6          // <--                                  // cmp	x6, x23
	CCMP LO, R24, R19, $2 // <--                                  // ccmp	x24, x19, #2, lo
	MOVD R16, R24         // <--                                  // mov	x24, x16
	BCC  LBB5_16          // <--                                  // b.lo	.LBB5_16
	ADD  R14, R22, R23    // <--                                  // add	x23, x22, x14
	MOVD R12, R24         // <--                                  // mov	x24, x12
	MOVD R4, R25          // <--                                  // mov	x25, x4

LBB5_14:
	WORD $0xad7f86e0   // FLDPQ -16(R23), (F0, F1)             // ldp	q0, q1, [x23, #-16]
	SUB  $4, R25, R25  // <--                                  // sub	x25, x25, #4
	ADD  $32, R23, R23 // <--                                  // add	x23, x23, #32
	CMP  R25, R16      // <--                                  // cmp	x16, x25
	WORD $0xad7f8f02   // FLDPQ -16(R24), (F2, F3)             // ldp	q2, q3, [x24, #-16]
	WORD $0x4e601c40   // VBIC V0.B16, V2.B16, V0.B16          // bic	v0.16b, v2.16b, v0.16b
	WORD $0x4e611c61   // VBIC V1.B16, V3.B16, V1.B16          // bic	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8700   // FSTPQ (F0, F1), -16(R24)             // stp	q0, q1, [x24, #-16]
	ADD  $32, R24, R24 // <--                                  // add	x24, x24, #32
	BNE  LBB5_14       // <--                                  // b.ne	.LBB5_14
	MOVD R20, R24      // <--                                  // mov	x24, x20
	CBZ  R7, LBB5_11   // <--                                  // cbz	x7, .LBB5_11

LBB5_16:
	LSL $3, R24, R25  // <--                                  // lsl	x25, x24, #3
	SUB R24, R2, R23  // <--                                  // sub	x23, x2, x24
	ADD R25, R0, R24  // <--                                  // add	x24, x0, x25
	ADD R25, R22, R22 // <--                                  // add	x22, x22, x25

LBB5_17:
	WORD $0xf84086d9   // MOVD.P 8(R22), R25                   // ldr	x25, [x22], #8
	WORD $0xf940031a   // MOVD (R24), R26                      // ldr	x26, [x24]
	SUBS $1, R23, R23  // <--                                  // subs	x23, x23, #1
	BIC  R25, R26, R25 // <--                                  // bic	x25, x26, x25
	WORD $0xf8008719   // MOVD.P R25, 8(R24)                   // str	x25, [x24], #8
	BNE  LBB5_17       // <--                                  // b.ne	.LBB5_17
	JMP  LBB5_11       // <--                                  // b	.LBB5_11

LBB5_18:
	LDP 64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP 48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP 32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP 16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                     // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                     // <--                                  // ret

TEXT ·_or_many(SB), 0, $80-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                      // (skipped)                            // stp	x29, x30, [sp, #-80]!
	ANDS $4294967295, R2, R8 // <--                                  // ands	x8, x2, #0xffffffff
	STP  (R26, R25), 16(RSP) // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP) // <--                                  // stp	x24, x23, [sp, #32]
	NOP                      // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP) // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP) // <--                                  // stp	x20, x19, [sp, #64]
	BEQ  LBB6_18             // <--                                  // b.eq	.LBB6_18
	LSR  $32, R2, R9         // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB6_18         // <--                                  // cbz	x9, .LBB6_18
	MOVD ZR, R10             // <--                                  // mov	x10, xzr
	MOVD ZR, R11             // <--                                  // mov	x11, xzr
	MOVD ZR, R16             // <--                                  // mov	x16, xzr
	ADD  $16, R0, R12        // <--                                  // add	x12, x0, #16
	MOVW $512, R13           // <--                                  // mov	w13, #512
	MOVW $16, R14            // <--                                  // mov	w14, #16
	MOVD R0, R15             // <--                                  // mov	x15, x0
	JMP  LBB6_4              // <--                                  // b	.LBB6_4

LBB6_3:
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R11, R11       // <--                                  // add	x11, x11, #1
	ADD  $(1<<12), R14, R14 // <--                                  // add	x14, x14, #1, lsl #12
	ADD  $(1<<12), R12, R12 // <--                                  // add	x12, x12, #1, lsl #12
	ADD  $(1<<12), R15, R15 // <--                                  // add	x15, x15, #1, lsl #12
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	MOVD R17, R16           // <--                                  // mov	x16, x17
	CMP  R8, R17            // <--                                  // cmp	x17, x8
	BCS  LBB6_18            // <--                                  // b.hs	.LBB6_18

LBB6_4:
	CMP  R8, R13         // <--                                  // cmp	x13, x8
	ADD  $512, R16, R17  // <--                                  // add	x17, x16, #512
	CSEL LO, R13, R8, R2 // <--                                  // csel	x2, x13, x8, lo
	CMP  R8, R17         // <--                                  // cmp	x17, x8
	CSEL LO, R17, R8, R3 // <--                                  // csel	x3, x17, x8, lo
	CMP  R3, R16         // <--                                  // cmp	x16, x3
	BCS  LBB6_3          // <--                                  // b.hs	.LBB6_3
	LSL  $9, R11, R5     // <--                                  // lsl	x5, x11, #9
	SUB  R5, R2, R20     // <--                                  // sub	x20, x2, x5
	CMP  $4, R20         // <--                                  // cmp	x20, #4
	BCS  LBB6_10         // <--                                  // b.hs	.LBB6_10
	MOVD ZR, R3          // <--                                  // mov	x3, xzr

LBB6_7:
	WORD $0xf8637824 // MOVD (R1)(R3<<3), R4                 // ldr	x4, [x1, x3, lsl #3]
	MOVD R15, R5     // <--                                  // mov	x5, x15
	MOVD R2, R6      // <--                                  // mov	x6, x2
	ADD  R10, R4, R4 // <--                                  // add	x4, x4, x10

LBB6_8:
	WORD $0xf8408487 // MOVD.P 8(R4), R7                     // ldr	x7, [x4], #8
	WORD $0xf94000b3 // MOVD (R5), R19                       // ldr	x19, [x5]
	SUB  $1, R6, R6  // <--                                  // sub	x6, x6, #1
	CMP  R6, R16     // <--                                  // cmp	x16, x6
	ORR  R7, R19, R7 // <--                                  // orr	x7, x19, x7
	WORD $0xf80084a7 // MOVD.P R7, 8(R5)                     // str	x7, [x5], #8
	BNE  LBB6_8      // <--                                  // b.ne	.LBB6_8
	ADD  $1, R3, R3  // <--                                  // add	x3, x3, #1
	CMP  R9, R3      // <--                                  // cmp	x3, x9
	BNE  LBB6_7      // <--                                  // b.ne	.LBB6_7
	JMP  LBB6_3      // <--                                  // b	.LBB6_3

LBB6_10:
	MVN  R5, R6              // <--                                  // mvn	x6, x5
	LSL  $12, R11, R5        // <--                                  // lsl	x5, x11, #12
	ADD  R6, R2, R7          // <--                                  // add	x7, x2, x6
	ADD  R5, R0, R6          // <--                                  // add	x6, x0, x5
	LSL  $3, R7, R21         // <--                                  // lsl	x21, x7, #3
	AND  $3, R2, R7          // <--                                  // and	x7, x2, #0x3
	ADD  R21, R6, R19        // <--                                  // add	x19, x6, x21
	SUB  R7, R20, R20        // <--                                  // sub	x20, x20, x7
	MOVD ZR, R3              // <--                                  // mov	x3, xzr
	AND  $4294967292, R2, R4 // <--                                  // and	x4, x2, #0xfffffffc
	ADD  $8, R19, R19        // <--                                  // add	x19, x19, #8
	ADD  R20, R16, R20       // <--                                  // add	x20, x16, x20
	ADD  R21, R5, R21        // <--                                  // add	x21, x5, x21
	JMP  LBB6_12             // <--                                  // b	.LBB6_12

LBB6_11:
	ADD $1, R3, R3 // <--                                  // add	x3, x3, #1
	CMP R9, R3     // <--                                  // cmp	x3, x9
	BEQ LBB6_3     // <--                                  // b.eq	.LBB6_3

LBB6_12:
	WORD $0xf8637836      // MOVD (R1)(R3<<3), R22                // ldr	x22, [x1, x3, lsl #3]
	ADD  R21, R22, R23    // <--                                  // add	x23, x22, x21
	ADD  R5, R22, R24     // <--                                  // add	x24, x22, x5
	ADD  $8, R23, R23     // <--                                  // add	x23, x23, #8
	CMP  R23, R6          // <--                                  // cmp	x6, x23
	CCMP LO, R24, R19, $2 // <--                                  // ccmp	x24, x19, #2, lo
	MOVD R16, R24         // <--                                  // mov	x24, x16
	BCC  LBB6_16          // <--                                  // b.lo	.LBB6_16
	ADD  R14, R22, R23    // <--                                  // add	x23, x22, x14
	MOVD R12, R24         // <--                                  // mov	x24, x12
	MOVD R4, R25          // <--                                  // mov	x25, x4

LBB6_14:
	WORD $0xad7f86e0   // FLDPQ -16(R23), (F0, F1)             // ldp	q0, q1, [x23, #-16]
	SUB  $4, R25, R25  // <--                                  // sub	x25, x25, #4
	ADD  $32, R23, R23 // <--                                  // add	x23, x23, #32
	CMP  R25, R16      // <--                                  // cmp	x16, x25
	WORD $0xad7f8f02   // FLDPQ -16(R24), (F2, F3)             // ldp	q2, q3, [x24, #-16]
	WORD $0x4ea01c40   // VORR V0.B16, V2.B16, V0.B16          // orr	v0.16b, v2.16b, v0.16b
	WORD $0x4ea11c61   // VORR V1.B16, V3.B16, V1.B16          // orr	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8700   // FSTPQ (F0, F1), -16(R24)             // stp	q0, q1, [x24, #-16]
	ADD  $32, R24, R24 // <--                                  // add	x24, x24, #32
	BNE  LBB6_14       // <--                                  // b.ne	.LBB6_14
	MOVD R20, R24      // <--                                  // mov	x24, x20
	CBZ  R7, LBB6_11   // <--                                  // cbz	x7, .LBB6_11

LBB6_16:
	LSL $3, R24, R25  // <--                                  // lsl	x25, x24, #3
	SUB R24, R2, R23  // <--                                  // sub	x23, x2, x24
	ADD R25, R0, R24  // <--                                  // add	x24, x0, x25
	ADD R25, R22, R22 // <--                                  // add	x22, x22, x25

LBB6_17:
	WORD $0xf84086d9   // MOVD.P 8(R22), R25                   // ldr	x25, [x22], #8
	WORD $0xf940031a   // MOVD (R24), R26                      // ldr	x26, [x24]
	SUBS $1, R23, R23  // <--                                  // subs	x23, x23, #1
	ORR  R25, R26, R25 // <--                                  // orr	x25, x26, x25
	WORD $0xf8008719   // MOVD.P R25, 8(R24)                   // str	x25, [x24], #8
	BNE  LBB6_17       // <--                                  // b.ne	.LBB6_17
	JMP  LBB6_11       // <--                                  // b	.LBB6_11

LBB6_18:
	LDP 64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP 48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP 32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP 16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                     // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                     // <--                                  // ret

TEXT ·_xor_many(SB), 0, $80-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                      // (skipped)                            // stp	x29, x30, [sp, #-80]!
	ANDS $4294967295, R2, R8 // <--                                  // ands	x8, x2, #0xffffffff
	STP  (R26, R25), 16(RSP) // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP) // <--                                  // stp	x24, x23, [sp, #32]
	NOP                      // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP) // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP) // <--                                  // stp	x20, x19, [sp, #64]
	BEQ  LBB7_18             // <--                                  // b.eq	.LBB7_18
	LSR  $32, R2, R9         // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB7_18         // <--                                  // cbz	x9, .LBB7_18
	MOVD ZR, R10             // <--                                  // mov	x10, xzr
	MOVD ZR, R11             // <--                                  // mov	x11, xzr
	MOVD ZR, R16             // <--                                  // mov	x16, xzr
	ADD  $16, R0, R12        // <--                                  // add	x12, x0, #16
	MOVW $512, R13           // <--                                  // mov	w13, #512
	MOVW $16, R14            // <--                                  // mov	w14, #16
	MOVD R0, R15             // <--                                  // mov	x15, x0
	JMP  LBB7_4              // <--                                  // b	.LBB7_4

LBB7_3:
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R11, R11       // <--                                  // add	x11, x11, #1
	ADD  $(1<<12), R14, R14 // <--                                  // add	x14, x14, #1, lsl #12
	ADD  $(1<<12), R12, R12 // <--                                  // add	x12, x12, #1, lsl #12
	ADD  $(1<<12), R15, R15 // <--                                  // add	x15, x15, #1, lsl #12
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	MOVD R17, R16           // <--                                  // mov	x16, x17
	CMP  R8, R17            // <--                                  // cmp	x17, x8
	BCS  LBB7_18            // <--                                  // b.hs	.LBB7_18

LBB7_4:
	CMP  R8, R13         // <--                                  // cmp	x13, x8
	ADD  $512, R16, R17  // <--                                  // add	x17, x16, #512
	CSEL LO, R13, R8, R2 // <--                                  // csel	x2, x13, x8, lo
	CMP  R8, R17         // <--                                  // cmp	x17, x8
	CSEL LO, R17, R8, R3 // <--                                  // csel	x3, x17, x8, lo
	CMP  R3, R16         // <--                                  // cmp	x16, x3
	BCS  LBB7_3          // <--                                  // b.hs	.LBB7_3
	LSL  $9, R11, R5     // <--                                  // lsl	x5, x11, #9
	SUB  R5, R2, R20     // <--                                  // sub	x20, x2, x5
	CMP  $4, R20         // <--                                  // cmp	x20, #4
	BCS  LBB7_10         // <--                                  // b.hs	.LBB7_10
	MOVD ZR, R3          // <--                                  // mov	x3, xzr

LBB7_7:
	WORD $0xf8637824 // MOVD (R1)(R3<<3), R4                 // ldr	x4, [x1, x3, lsl #3]
	MOVD R15, R5     // <--                                  // mov	x5, x15
	MOVD R2, R6      // <--                                  // mov	x6, x2
	ADD  R10, R4, R4 // <--                                  // add	x4, x4, x10

LBB7_8:
	WORD $0xf8408487 // MOVD.P 8(R4), R7                     // ldr	x7, [x4], #8
	WORD $0xf94000b3 // MOVD (R5), R19                       // ldr	x19, [x5]
	SUB  $1, R6, R6  // <--                                  // sub	x6, x6, #1
	CMP  R6, R16     // <--                                  // cmp	x16, x6
	EOR  R7, R19, R7 // <--                                  // eor	x7, x19, x7
	WORD $0xf80084a7 // MOVD.P R7, 8(R5)                     // str	x7, [x5], #8
	BNE  LBB7_8      // <--                                  // b.ne	.LBB7_8
	ADD  $1, R3, R3  // <--                                  // add	x3, x3, #1
	CMP  R9, R3      // <--                                  // cmp	x3, x9
	BNE  LBB7_7      // <--                                  // b.ne	.LBB7_7
	JMP  LBB7_3      // <--                                  // b	.LBB7_3

LBB7_10:
	MVN  R5, R6              // <--                                  // mvn	x6, x5
	LSL  $12, R11, R5        // <--                                  // lsl	x5, x11, #12
	ADD  R6, R2, R7          // <--                                  // add	x7, x2, x6
	ADD  R5, R0, R6          // <--                                  // add	x6, x0, x5
	LSL  $3, R7, R21         // <--                                  // lsl	x21, x7, #3
	AND  $3, R2, R7          // <--                                  // and	x7, x2, #0x3
	ADD  R21, R6, R19        // <--                                  // add	x19, x6, x21
	SUB  R7, R20, R20        // <--                                  // sub	x20, x20, x7
	MOVD ZR, R3              // <--                                  // mov	x3, xzr
	AND  $4294967292, R2, R4 // <--                                  // and	x4, x2, #0xfffffffc
	ADD  $8, R19, R19        // <--                                  // add	x19, x19, #8
	ADD  R20, R16, R20       // <--                                  // add	x20, x16, x20
	ADD  R21, R5, R21        // <--                                  // add	x21, x5, x21
	JMP  LBB7_12             // <--                                  // b	.LBB7_12

LBB7_11:
	ADD $1, R3, R3 // <--                                  // add	x3, x3, #1
	CMP R9, R3     // <--                                  // cmp	x3, x9
	BEQ LBB7_3     // <--                                  // b.eq	.LBB7_3

LBB7_12:
	WORD $0xf8637836      // MOVD (R1)(R3<<3), R22                // ldr	x22, [x1, x3, lsl #3]
	ADD  R21, R22, R23    // <--                                  // add	x23, x22, x21
	ADD  R5, R22, R24     // <--                                  // add	x24, x22, x5
	ADD  $8, R23, R23     // <--                                  // add	x23, x23, #8
	CMP  R23, R6          // <--                                  // cmp	x6, x23
	CCMP LO, R24, R19, $2 // <--                                  // ccmp	x24, x19, #2, lo
	MOVD R16, R24         // <--                                  // mov	x24, x16
	BCC  LBB7_16          // <--                                  // b.lo	.LBB7_16
	ADD  R14, R22, R23    // <--                                  // add	x23, x22, x14
	MOVD R12, R24         // <--                                  // mov	x24, x12
	MOVD R4, R25          // <--                                  // mov	x25, x4

LBB7_14:
	WORD $0xad7f86e0   // FLDPQ -16(R23), (F0, F1)             // ldp	q0, q1, [x23, #-16]
	SUB  $4, R25, R25  // <--                                  // sub	x25, x25, #4
	ADD  $32, R23, R23 // <--                                  // add	x23, x23, #32
	CMP  R25, R16      // <--                                  // cmp	x16, x25
	WORD $0xad7f8f02   // FLDPQ -16(R24), (F2, F3)             // ldp	q2, q3, [x24, #-16]
	WORD $0x6e201c40   // VEOR V0.B16, V2.B16, V0.B16          // eor	v0.16b, v2.16b, v0.16b
	WORD $0x6e211c61   // VEOR V1.B16, V3.B16, V1.B16          // eor	v1.16b, v3.16b, v1.16b
	WORD $0xad3f8700   // FSTPQ (F0, F1), -16(R24)             // stp	q0, q1, [x24, #-16]
	ADD  $32, R24, R24 // <--                                  // add	x24, x24, #32
	BNE  LBB7_14       // <--                                  // b.ne	.LBB7_14
	MOVD R20, R24      // <--                                  // mov	x24, x20
	CBZ  R7, LBB7_11   // <--                                  // cbz	x7, .LBB7_11

LBB7_16:
	LSL $3, R24, R25  // <--                                  // lsl	x25, x24, #3
	SUB R24, R2, R23  // <--                                  // sub	x23, x2, x24
	ADD R25, R0, R24  // <--                                  // add	x24, x0, x25
	ADD R25, R22, R22 // <--                                  // add	x22, x22, x25

LBB7_17:
	WORD $0xf84086d9   // MOVD.P 8(R22), R25                   // ldr	x25, [x22], #8
	WORD $0xf940031a   // MOVD (R24), R26                      // ldr	x26, [x24]
	SUBS $1, R23, R23  // <--                                  // subs	x23, x23, #1
	EOR  R25, R26, R25 // <--                                  // eor	x25, x26, x25
	WORD $0xf8008719   // MOVD.P R25, 8(R24)                   // str	x25, [x24], #8
	BNE  LBB7_17       // <--                                  // b.ne	.LBB7_17
	JMP  LBB7_11       // <--                                  // b	.LBB7_11

LBB7_18:
	LDP 64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP 48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP 32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP 16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                     // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                     // <--                                  // ret

TEXT ·_count(SB), NOSPLIT, $0-32
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	NOP                   // (skipped)                            // mov	x29, sp
	CBZ  R1, LBB8_3       // <--                                  // cbz	x1, .LBB8_3
	CMP  $4, R1           // <--                                  // cmp	x1, #4
	BCS  LBB8_4           // <--                                  // b.hs	.LBB8_4
	MOVD ZR, R9           // <--                                  // mov	x9, xzr
	MOVD ZR, R8           // <--                                  // mov	x8, xzr
	JMP  LBB8_7           // <--                                  // b	.LBB8_7

LBB8_3:
	MOVD ZR, R8 // <--                                  // mov	x8, xzr
	JMP  LBB8_9 // <--                                  // b	.LBB8_9

LBB8_4:
	AND  $-4, R1, R9 // <--                                  // and	x9, x1, #0xfffffffffffffffc
	ADD  $16, R0, R8 // <--                                  // add	x8, x0, #16
	WORD $0x6f00e400 // VMOVI $0, V0.D2                      // movi	v0.2d, #0000000000000000
	MOVD R9, R10     // <--                                  // mov	x10, x9
	WORD $0x6f00e401 // VMOVI $0, V1.D2                      // movi	v1.2d, #0000000000000000

LBB8_5:
	WORD  $0xad7f8d02  // FLDPQ -16(R8), (F2, F3)              // ldp	q2, q3, [x8, #-16]
	ADD   $32, R8, R8  // <--                                  // add	x8, x8, #32
	SUBS  $4, R10, R10 // <--                                  // subs	x10, x10, #4
	WORD  $0x4e205842  // VCNT V2.B16, V2.B16                  // cnt	v2.16b, v2.16b
	WORD  $0x4e205863  // VCNT V3.B16, V3.B16                  // cnt	v3.16b, v3.16b
	WORD  $0x6e202842  // VUADDLP V2.B16, V2.H8                // uaddlp	v2.8h, v2.16b
	WORD  $0x6e202863  // VUADDLP V3.B16, V3.H8                // uaddlp	v3.8h, v3.16b
	WORD  $0x6e602842  // VUADDLP V2.H8, V2.S4                 // uaddlp	v2.4s, v2.8h
	WORD  $0x6e602863  // VUADDLP V3.H8, V3.S4                 // uaddlp	v3.4s, v3.8h
	WORD  $0x6ea06840  // VUADALP V2.S4, V0.D2                 // uadalp	v0.2d, v2.4s
	WORD  $0x6ea06861  // VUADALP V3.S4, V1.D2                 // uadalp	v1.2d, v3.4s
	BNE   LBB8_5       // <--                                  // b.ne	.LBB8_5
	WORD  $0x4ee08420  // VADD V0.D2, V1.D2, V0.D2             // add	v0.2d, v1.2d, v0.2d
	CMP   R1, R9       // <--                                  // cmp	x9, x1
	WORD  $0x5ef1b800  // VADDP V0.D2, V0                      // addp	d0, v0.2d
	FMOVD F0, R8       // <--                                  // fmov	x8, d0
	BEQ   LBB8_9       // <--                                  // b.eq	.LBB8_9

LBB8_7:
	ADD R9<<3, R0, R10 // <--                                  // add	x10, x0, x9, lsl #3
	SUB R9, R1, R9     // <--                                  // sub	x9, x1, x9

LBB8_8:
	WORD  $0xfc408540 // FMOVD.P 8(R10), F0                   // ldr	d0, [x10], #8
	SUBS  $1, R9, R9  // <--                                  // subs	x9, x9, #1
	WORD  $0x0e205800 // VCNT V0.B8, V0.B8                    // cnt	v0.8b, v0.8b
	WORD  $0x2e303800 // VUADDLV V0.B8, V0                    // uaddlv	h0, v0.8b
	FMOVS F0, R11     // <--                                  // fmov	w11, s0
	ADD   R8, R11, R8 // <--                                  // add	x8, x11, x8
	BNE   LBB8_8      // <--                                  // b.ne	.LBB8_8

LBB8_9:
	MOVD R8, R0         // <--                                  // mov	x0, x8
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+24(FP) // <--
	RET                 // <--                                  // ret
