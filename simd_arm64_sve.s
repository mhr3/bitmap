//go:build !noasm && arm64
// Code generated by gocc -- DO NOT EDIT.

#include "textflag.h"

TEXT ·_and_sve(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB0_7       // <--                                  // cbz	x8, .LBB0_7
	WORD $0x04a0e3e9      // ?                                    // cntw	x9
	CMP  R9, R8           // <--                                  // cmp	x8, x9
	BCC  LBB0_4           // <--                                  // b.lo	.LBB0_4
	LSL  $3, R8, R10      // <--                                  // lsl	x10, x8, #3
	ADD  R10, R3, R11     // <--                                  // add	x11, x3, x10
	CMP  R0, R11          // <--                                  // cmp	x11, x0
	BLS  LBB0_8           // <--                                  // b.ls	.LBB0_8
	ADD  R10, R0, R10     // <--                                  // add	x10, x0, x10
	CMP  R3, R10          // <--                                  // cmp	x10, x3
	BLS  LBB0_8           // <--                                  // b.ls	.LBB0_8

LBB0_4:
	MOVD ZR, R10 // <--                                  // mov	x10, xzr

LBB0_5:
	SUB R10, R8, R8  // <--                                  // sub	x8, x8, x10
	LSL $3, R10, R10 // <--                                  // lsl	x10, x10, #3
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB0_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	AND  R11, R12, R11 // <--                                  // and	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB0_6        // <--                                  // b.ne	.LBB0_6

LBB0_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB0_8:
	UDIV R9, R8, R10  // <--                                  // udiv	x10, x8, x9
	WORD $0x04bf502c  // ?                                    // rdvl	x12, #1
	LSR  $4, R12, R12 // <--                                  // lsr	x12, x12, #4
	MOVD ZR, R11      // <--                                  // mov	x11, xzr
	LSL  $4, R12, R14 // <--                                  // lsl	x14, x12, #4
	WORD $0x25d8e3e0  // ?                                    // ptrue	p0.d
	ADD  R14, R3, R13 // <--                                  // add	x13, x3, x14
	ADD  R14, R0, R14 // <--                                  // add	x14, x0, x14
	MUL  R9, R10, R10 // <--                                  // mul	x10, x10, x9
	SUB  R10, R8, R12 // <--                                  // sub	x12, x8, x10

LBB0_9:
	WORD $0xa5eb4060  // ?                                    // ld1d	{ z0.d }, p0/z, [x3, x11, lsl #3]
	WORD $0xa5eb4001  // ?                                    // ld1d	{ z1.d }, p0/z, [x0, x11, lsl #3]
	WORD $0xa5eb41a2  // ?                                    // ld1d	{ z2.d }, p0/z, [x13, x11, lsl #3]
	WORD $0xa5eb41c3  // ?                                    // ld1d	{ z3.d }, p0/z, [x14, x11, lsl #3]
	WORD $0x04203020  // ?                                    // and	z0.d, z1.d, z0.d
	WORD $0x04223061  // ?                                    // and	z1.d, z3.d, z2.d
	WORD $0xe5eb4000  // ?                                    // st1d	{ z0.d }, p0, [x0, x11, lsl #3]
	WORD $0xe5eb41c1  // ?                                    // st1d	{ z1.d }, p0, [x14, x11, lsl #3]
	ADD  R9, R11, R11 // <--                                  // add	x11, x11, x9
	CMP  R11, R10     // <--                                  // cmp	x10, x11
	BNE  LBB0_9       // <--                                  // b.ne	.LBB0_9
	CBNZ R12, LBB0_5  // <--                                  // cbnz	x12, .LBB0_5
	JMP  LBB0_7       // <--                                  // b	.LBB0_7

TEXT ·_andn_sve(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB1_7       // <--                                  // cbz	x8, .LBB1_7
	WORD $0x04a0e3e9      // ?                                    // cntw	x9
	CMP  R9, R8           // <--                                  // cmp	x8, x9
	BCC  LBB1_4           // <--                                  // b.lo	.LBB1_4
	LSL  $3, R8, R10      // <--                                  // lsl	x10, x8, #3
	ADD  R10, R3, R11     // <--                                  // add	x11, x3, x10
	CMP  R0, R11          // <--                                  // cmp	x11, x0
	BLS  LBB1_8           // <--                                  // b.ls	.LBB1_8
	ADD  R10, R0, R10     // <--                                  // add	x10, x0, x10
	CMP  R3, R10          // <--                                  // cmp	x10, x3
	BLS  LBB1_8           // <--                                  // b.ls	.LBB1_8

LBB1_4:
	MOVD ZR, R10 // <--                                  // mov	x10, xzr

LBB1_5:
	SUB R10, R8, R8  // <--                                  // sub	x8, x8, x10
	LSL $3, R10, R10 // <--                                  // lsl	x10, x10, #3
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB1_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	BIC  R11, R12, R11 // <--                                  // bic	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB1_6        // <--                                  // b.ne	.LBB1_6

LBB1_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB1_8:
	UDIV R9, R8, R10  // <--                                  // udiv	x10, x8, x9
	WORD $0x04bf502c  // ?                                    // rdvl	x12, #1
	LSR  $4, R12, R12 // <--                                  // lsr	x12, x12, #4
	MOVD ZR, R11      // <--                                  // mov	x11, xzr
	LSL  $4, R12, R14 // <--                                  // lsl	x14, x12, #4
	WORD $0x25d8e3e0  // ?                                    // ptrue	p0.d
	ADD  R14, R3, R13 // <--                                  // add	x13, x3, x14
	ADD  R14, R0, R14 // <--                                  // add	x14, x0, x14
	MUL  R9, R10, R10 // <--                                  // mul	x10, x10, x9
	SUB  R10, R8, R12 // <--                                  // sub	x12, x8, x10

LBB1_9:
	WORD $0xa5eb4060  // ?                                    // ld1d	{ z0.d }, p0/z, [x3, x11, lsl #3]
	WORD $0xa5eb4001  // ?                                    // ld1d	{ z1.d }, p0/z, [x0, x11, lsl #3]
	WORD $0xa5eb41a2  // ?                                    // ld1d	{ z2.d }, p0/z, [x13, x11, lsl #3]
	WORD $0xa5eb41c3  // ?                                    // ld1d	{ z3.d }, p0/z, [x14, x11, lsl #3]
	WORD $0x04e03020  // ?                                    // bic	z0.d, z1.d, z0.d
	WORD $0x04e23061  // ?                                    // bic	z1.d, z3.d, z2.d
	WORD $0xe5eb4000  // ?                                    // st1d	{ z0.d }, p0, [x0, x11, lsl #3]
	WORD $0xe5eb41c1  // ?                                    // st1d	{ z1.d }, p0, [x14, x11, lsl #3]
	ADD  R9, R11, R11 // <--                                  // add	x11, x11, x9
	CMP  R11, R10     // <--                                  // cmp	x10, x11
	BNE  LBB1_9       // <--                                  // b.ne	.LBB1_9
	CBNZ R12, LBB1_5  // <--                                  // cbnz	x12, .LBB1_5
	JMP  LBB1_7       // <--                                  // b	.LBB1_7

TEXT ·_or_sve(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB2_7       // <--                                  // cbz	x8, .LBB2_7
	WORD $0x04a0e3e9      // ?                                    // cntw	x9
	CMP  R9, R8           // <--                                  // cmp	x8, x9
	BCC  LBB2_4           // <--                                  // b.lo	.LBB2_4
	LSL  $3, R8, R10      // <--                                  // lsl	x10, x8, #3
	ADD  R10, R3, R11     // <--                                  // add	x11, x3, x10
	CMP  R0, R11          // <--                                  // cmp	x11, x0
	BLS  LBB2_8           // <--                                  // b.ls	.LBB2_8
	ADD  R10, R0, R10     // <--                                  // add	x10, x0, x10
	CMP  R3, R10          // <--                                  // cmp	x10, x3
	BLS  LBB2_8           // <--                                  // b.ls	.LBB2_8

LBB2_4:
	MOVD ZR, R10 // <--                                  // mov	x10, xzr

LBB2_5:
	SUB R10, R8, R8  // <--                                  // sub	x8, x8, x10
	LSL $3, R10, R10 // <--                                  // lsl	x10, x10, #3
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB2_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	ORR  R11, R12, R11 // <--                                  // orr	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB2_6        // <--                                  // b.ne	.LBB2_6

LBB2_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB2_8:
	UDIV R9, R8, R10  // <--                                  // udiv	x10, x8, x9
	WORD $0x04bf502c  // ?                                    // rdvl	x12, #1
	LSR  $4, R12, R12 // <--                                  // lsr	x12, x12, #4
	MOVD ZR, R11      // <--                                  // mov	x11, xzr
	LSL  $4, R12, R14 // <--                                  // lsl	x14, x12, #4
	WORD $0x25d8e3e0  // ?                                    // ptrue	p0.d
	ADD  R14, R3, R13 // <--                                  // add	x13, x3, x14
	ADD  R14, R0, R14 // <--                                  // add	x14, x0, x14
	MUL  R9, R10, R10 // <--                                  // mul	x10, x10, x9
	SUB  R10, R8, R12 // <--                                  // sub	x12, x8, x10

LBB2_9:
	WORD $0xa5eb4060  // ?                                    // ld1d	{ z0.d }, p0/z, [x3, x11, lsl #3]
	WORD $0xa5eb4001  // ?                                    // ld1d	{ z1.d }, p0/z, [x0, x11, lsl #3]
	WORD $0xa5eb41a2  // ?                                    // ld1d	{ z2.d }, p0/z, [x13, x11, lsl #3]
	WORD $0xa5eb41c3  // ?                                    // ld1d	{ z3.d }, p0/z, [x14, x11, lsl #3]
	WORD $0x04603020  // ?                                    // orr	z0.d, z1.d, z0.d
	WORD $0x04623061  // ?                                    // orr	z1.d, z3.d, z2.d
	WORD $0xe5eb4000  // ?                                    // st1d	{ z0.d }, p0, [x0, x11, lsl #3]
	WORD $0xe5eb41c1  // ?                                    // st1d	{ z1.d }, p0, [x14, x11, lsl #3]
	ADD  R9, R11, R11 // <--                                  // add	x11, x11, x9
	CMP  R11, R10     // <--                                  // cmp	x10, x11
	BNE  LBB2_9       // <--                                  // b.ne	.LBB2_9
	CBNZ R12, LBB2_5  // <--                                  // cbnz	x12, .LBB2_5
	JMP  LBB2_7       // <--                                  // b	.LBB2_7

TEXT ·_xor_sve(SB), NOSPLIT, $0-48
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	MOVD b+24(FP), R3
	MOVD b_len+32(FP), R4
	MOVD b_cap+40(FP), R5
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  R4, R1           // <--                                  // cmp	x1, x4
	NOP                   // (skipped)                            // mov	x29, sp
	CSEL LO, R1, R4, R8   // <--                                  // csel	x8, x1, x4, lo
	CBZ  R8, LBB3_7       // <--                                  // cbz	x8, .LBB3_7
	WORD $0x04a0e3e9      // ?                                    // cntw	x9
	CMP  R9, R8           // <--                                  // cmp	x8, x9
	BCC  LBB3_4           // <--                                  // b.lo	.LBB3_4
	LSL  $3, R8, R10      // <--                                  // lsl	x10, x8, #3
	ADD  R10, R3, R11     // <--                                  // add	x11, x3, x10
	CMP  R0, R11          // <--                                  // cmp	x11, x0
	BLS  LBB3_8           // <--                                  // b.ls	.LBB3_8
	ADD  R10, R0, R10     // <--                                  // add	x10, x0, x10
	CMP  R3, R10          // <--                                  // cmp	x10, x3
	BLS  LBB3_8           // <--                                  // b.ls	.LBB3_8

LBB3_4:
	MOVD ZR, R10 // <--                                  // mov	x10, xzr

LBB3_5:
	SUB R10, R8, R8  // <--                                  // sub	x8, x8, x10
	LSL $3, R10, R10 // <--                                  // lsl	x10, x10, #3
	ADD R10, R0, R9  // <--                                  // add	x9, x0, x10
	ADD R10, R3, R10 // <--                                  // add	x10, x3, x10

LBB3_6:
	WORD $0xf840854b   // MOVD.P 8(R10), R11                   // ldr	x11, [x10], #8
	WORD $0xf940012c   // MOVD (R9), R12                       // ldr	x12, [x9]
	SUBS $1, R8, R8    // <--                                  // subs	x8, x8, #1
	EOR  R11, R12, R11 // <--                                  // eor	x11, x12, x11
	WORD $0xf800852b   // MOVD.P R11, 8(R9)                    // str	x11, [x9], #8
	BNE  LBB3_6        // <--                                  // b.ne	.LBB3_6

LBB3_7:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB3_8:
	UDIV R9, R8, R10  // <--                                  // udiv	x10, x8, x9
	WORD $0x04bf502c  // ?                                    // rdvl	x12, #1
	LSR  $4, R12, R12 // <--                                  // lsr	x12, x12, #4
	MOVD ZR, R11      // <--                                  // mov	x11, xzr
	LSL  $4, R12, R14 // <--                                  // lsl	x14, x12, #4
	WORD $0x25d8e3e0  // ?                                    // ptrue	p0.d
	ADD  R14, R3, R13 // <--                                  // add	x13, x3, x14
	ADD  R14, R0, R14 // <--                                  // add	x14, x0, x14
	MUL  R9, R10, R10 // <--                                  // mul	x10, x10, x9
	SUB  R10, R8, R12 // <--                                  // sub	x12, x8, x10

LBB3_9:
	WORD $0xa5eb4060  // ?                                    // ld1d	{ z0.d }, p0/z, [x3, x11, lsl #3]
	WORD $0xa5eb4001  // ?                                    // ld1d	{ z1.d }, p0/z, [x0, x11, lsl #3]
	WORD $0xa5eb41a2  // ?                                    // ld1d	{ z2.d }, p0/z, [x13, x11, lsl #3]
	WORD $0xa5eb41c3  // ?                                    // ld1d	{ z3.d }, p0/z, [x14, x11, lsl #3]
	WORD $0x04a03020  // ?                                    // eor	z0.d, z1.d, z0.d
	WORD $0x04a23061  // ?                                    // eor	z1.d, z3.d, z2.d
	WORD $0xe5eb4000  // ?                                    // st1d	{ z0.d }, p0, [x0, x11, lsl #3]
	WORD $0xe5eb41c1  // ?                                    // st1d	{ z1.d }, p0, [x14, x11, lsl #3]
	ADD  R9, R11, R11 // <--                                  // add	x11, x11, x9
	CMP  R11, R10     // <--                                  // cmp	x10, x11
	BNE  LBB3_9       // <--                                  // b.ne	.LBB3_9
	CBNZ R12, LBB3_5  // <--                                  // cbnz	x12, .LBB3_5
	JMP  LBB3_7       // <--                                  // b	.LBB3_7

TEXT ·_and_many_sve(SB), 0, $96-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                       // (skipped)                            // stp	x29, x30, [sp, #-80]!
	SUB  $16, RSP, R9         // <--                                  // sub	x9, sp, #16
	STP  (R26, R25), 16(RSP)  // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP)  // <--                                  // stp	x24, x23, [sp, #32]
	NOP                       // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP)  // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP)  // <--                                  // stp	x20, x19, [sp, #64]
	AND  $-8, R9, RSP         // <--                                  // and	sp, x9, #0xfffffffffffffff8
	ANDS $4294967295, R2, R15 // <--                                  // ands	x15, x2, #0xffffffff
	BEQ  LBB4_18              // <--                                  // b.eq	.LBB4_18
	LSR  $32, R2, R9          // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB4_18          // <--                                  // cbz	x9, .LBB4_18
	WORD $0x04bf5028          // ?                                    // rdvl	x8, #1
	MOVD R0, R14              // <--                                  // mov	x14, x0
	MOVD ZR, R10              // <--                                  // mov	x10, xzr
	MOVD ZR, R11              // <--                                  // mov	x11, xzr
	MOVD ZR, R12              // <--                                  // mov	x12, xzr
	MOVD ZR, R2               // <--                                  // mov	x2, xzr
	MOVW $512, R13            // <--                                  // mov	w13, #512
	LSR  $4, R8, R8           // <--                                  // lsr	x8, x8, #4
	WORD $0x04a0e3f0          // ?                                    // cntw	x16
	WORD $0x25d8e3e0          // ?                                    // ptrue	p0.d
	WORD $0x2518e3e1          // ?                                    // ptrue	p1.b
	STP  (R8, R15), (RSP)     // <--                                  // stp	x8, x15, [sp]
	JMP  LBB4_4               // <--                                  // b	.LBB4_4

LBB4_3:
	WORD $0xf94007ef        // MOVD 8(RSP), R15                     // ldr	x15, [sp, #8]
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R12, R12       // <--                                  // add	x12, x12, #1
	SUB  $512, R11, R11     // <--                                  // sub	x11, x11, #512
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	ADD  $(1<<12), R0, R0   // <--                                  // add	x0, x0, #1, lsl #12
	MOVD R17, R2            // <--                                  // mov	x2, x17
	CMP  R15, R17           // <--                                  // cmp	x17, x15
	BCS  LBB4_18            // <--                                  // b.hs	.LBB4_18

LBB4_4:
	CMP  R15, R13         // <--                                  // cmp	x13, x15
	ADD  $512, R2, R17    // <--                                  // add	x17, x2, #512
	CSEL LO, R13, R15, R3 // <--                                  // csel	x3, x13, x15, lo
	CMP  R15, R17         // <--                                  // cmp	x17, x15
	CSEL LO, R17, R15, R8 // <--                                  // csel	x8, x17, x15, lo
	CMP  R8, R2           // <--                                  // cmp	x2, x8
	BCS  LBB4_3           // <--                                  // b.hs	.LBB4_3
	LSL  $9, R12, R8      // <--                                  // lsl	x8, x12, #9
	ADD  R11, R3, R6      // <--                                  // add	x6, x3, x11
	SUB  R8, R3, R4       // <--                                  // sub	x4, x3, x8
	CMP  R16, R4          // <--                                  // cmp	x4, x16
	BCS  LBB4_10          // <--                                  // b.hs	.LBB4_10
	MOVD ZR, R2           // <--                                  // mov	x2, xzr

LBB4_7:
	WORD $0xf862782f   // MOVD (R1)(R2<<3), R15                // ldr	x15, [x1, x2, lsl #3]
	MOVD ZR, R8        // <--                                  // mov	x8, xzr
	ADD  R10, R15, R15 // <--                                  // add	x15, x15, x10

LBB4_8:
	LSL  $3, R8, R3  // <--                                  // lsl	x3, x8, #3
	ADD  $1, R8, R8  // <--                                  // add	x8, x8, #1
	CMP  R8, R6      // <--                                  // cmp	x6, x8
	WORD $0xf86369e4 // MOVD (R15)(R3), R4                   // ldr	x4, [x15, x3]
	WORD $0xf8636805 // MOVD (R0)(R3), R5                    // ldr	x5, [x0, x3]
	AND  R4, R5, R4  // <--                                  // and	x4, x5, x4
	WORD $0xf8236804 // MOVD R4, (R0)(R3)                    // str	x4, [x0, x3]
	BNE  LBB4_8      // <--                                  // b.ne	.LBB4_8
	ADD  $1, R2, R2  // <--                                  // add	x2, x2, #1
	CMP  R9, R2      // <--                                  // cmp	x2, x9
	BNE  LBB4_7      // <--                                  // b.ne	.LBB4_7
	JMP  LBB4_3      // <--                                  // b	.LBB4_3

LBB4_10:
	UDIV R16, R6, R15  // <--                                  // udiv	x15, x6, x16
	WORD $0xf94003f5   // MOVD (RSP), R21                      // ldr	x21, [sp]
	MVN  R8, R8        // <--                                  // mvn	x8, x8
	LSL  $12, R12, R6  // <--                                  // lsl	x6, x12, #12
	ADD  R8, R3, R8    // <--                                  // add	x8, x3, x8
	ADD  R6, R14, R7   // <--                                  // add	x7, x14, x6
	LSL  $3, R8, R8    // <--                                  // lsl	x8, x8, #3
	MOVD ZR, R5        // <--                                  // mov	x5, xzr
	ADD  R8, R7, R20   // <--                                  // add	x20, x7, x8
	ADD  R8, R6, R19   // <--                                  // add	x19, x6, x8
	ADD  $8, R20, R20  // <--                                  // add	x20, x20, #8
	LSL  $5, R21, R22  // <--                                  // lsl	x22, x21, #5
	LSL  $4, R21, R23  // <--                                  // lsl	x23, x21, #4
	MUL  R15, R21, R15 // <--                                  // mul	x15, x21, x15
	LSL  $2, R15, R8   // <--                                  // lsl	x8, x15, #2
	JMP  LBB4_12       // <--                                  // b	.LBB4_12

LBB4_11:
	ADD $1, R5, R5 // <--                                  // add	x5, x5, #1
	CMP R9, R5     // <--                                  // cmp	x5, x9
	BEQ LBB4_3     // <--                                  // b.eq	.LBB4_3

LBB4_12:
	WORD $0xf8657838      // MOVD (R1)(R5<<3), R24                // ldr	x24, [x1, x5, lsl #3]
	MOVD R2, R25          // <--                                  // mov	x25, x2
	ADD  R19, R24, R15    // <--                                  // add	x15, x24, x19
	ADD  R6, R24, R21     // <--                                  // add	x21, x24, x6
	ADD  $8, R15, R15     // <--                                  // add	x15, x15, #8
	CMP  R15, R7          // <--                                  // cmp	x7, x15
	CCMP LO, R21, R20, $2 // <--                                  // ccmp	x21, x20, #2, lo
	BCC  LBB4_16          // <--                                  // b.lo	.LBB4_16
	UDIV R16, R4, R15     // <--                                  // udiv	x15, x4, x16
	ADD  R10, R24, R30    // <--                                  // add	x30, x24, x10
	MOVD R8, R21          // <--                                  // mov	x21, x8
	MUL  R16, R15, R15    // <--                                  // mul	x15, x15, x16
	SUB  R15, R4, R26     // <--                                  // sub	x26, x4, x15
	ADD  R15, R2, R25     // <--                                  // add	x25, x2, x15
	MOVD R0, R15          // <--                                  // mov	x15, x0

LBB4_14:
	WORD $0xa5e0a3c0   // ?                                    // ld1d	{ z0.d }, p0/z, [x30]
	WORD $0xa41747c1   // ?                                    // ld1b	{ z1.b }, p1/z, [x30, x23]
	WORD $0xa5e0a1e2   // ?                                    // ld1d	{ z2.d }, p0/z, [x15]
	WORD $0xa41745e3   // ?                                    // ld1b	{ z3.b }, p1/z, [x15, x23]
	SUBS R16, R21, R21 // <--                                  // subs	x21, x21, x16
	ADD  R22, R30, R30 // <--                                  // add	x30, x30, x22
	WORD $0x04203040   // ?                                    // and	z0.d, z2.d, z0.d
	WORD $0x04213061   // ?                                    // and	z1.d, z3.d, z1.d
	WORD $0xe5e0e1e0   // ?                                    // st1d	{ z0.d }, p0, [x15]
	WORD $0xe41745e1   // ?                                    // st1b	{ z1.b }, p1, [x15, x23]
	ADD  R22, R15, R15 // <--                                  // add	x15, x15, x22
	BNE  LBB4_14       // <--                                  // b.ne	.LBB4_14
	CBZ  R26, LBB4_11  // <--                                  // cbz	x26, .LBB4_11

LBB4_16:
	LSL $3, R25, R21  // <--                                  // lsl	x21, x25, #3
	SUB R25, R3, R26  // <--                                  // sub	x26, x3, x25
	ADD R21, R14, R15 // <--                                  // add	x15, x14, x21
	ADD R21, R24, R21 // <--                                  // add	x21, x24, x21

LBB4_17:
	WORD $0xf84086b8   // MOVD.P 8(R21), R24                   // ldr	x24, [x21], #8
	WORD $0xf94001f9   // MOVD (R15), R25                      // ldr	x25, [x15]
	SUBS $1, R26, R26  // <--                                  // subs	x26, x26, #1
	AND  R24, R25, R24 // <--                                  // and	x24, x25, x24
	WORD $0xf80085f8   // MOVD.P R24, 8(R15)                   // str	x24, [x15], #8
	BNE  LBB4_17       // <--                                  // b.ne	.LBB4_17
	JMP  LBB4_11       // <--                                  // b	.LBB4_11

LBB4_18:
	MOVD R29, RSP            // <--                                  // mov	sp, x29
	LDP  64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP  48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP  32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP  16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                      // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                      // <--                                  // ret

TEXT ·_andn_many_sve(SB), 0, $96-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                       // (skipped)                            // stp	x29, x30, [sp, #-80]!
	SUB  $16, RSP, R9         // <--                                  // sub	x9, sp, #16
	STP  (R26, R25), 16(RSP)  // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP)  // <--                                  // stp	x24, x23, [sp, #32]
	NOP                       // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP)  // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP)  // <--                                  // stp	x20, x19, [sp, #64]
	AND  $-8, R9, RSP         // <--                                  // and	sp, x9, #0xfffffffffffffff8
	ANDS $4294967295, R2, R15 // <--                                  // ands	x15, x2, #0xffffffff
	BEQ  LBB5_18              // <--                                  // b.eq	.LBB5_18
	LSR  $32, R2, R9          // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB5_18          // <--                                  // cbz	x9, .LBB5_18
	WORD $0x04bf5028          // ?                                    // rdvl	x8, #1
	MOVD R0, R14              // <--                                  // mov	x14, x0
	MOVD ZR, R10              // <--                                  // mov	x10, xzr
	MOVD ZR, R11              // <--                                  // mov	x11, xzr
	MOVD ZR, R12              // <--                                  // mov	x12, xzr
	MOVD ZR, R2               // <--                                  // mov	x2, xzr
	MOVW $512, R13            // <--                                  // mov	w13, #512
	LSR  $4, R8, R8           // <--                                  // lsr	x8, x8, #4
	WORD $0x04a0e3f0          // ?                                    // cntw	x16
	WORD $0x25d8e3e0          // ?                                    // ptrue	p0.d
	WORD $0x2518e3e1          // ?                                    // ptrue	p1.b
	STP  (R8, R15), (RSP)     // <--                                  // stp	x8, x15, [sp]
	JMP  LBB5_4               // <--                                  // b	.LBB5_4

LBB5_3:
	WORD $0xf94007ef        // MOVD 8(RSP), R15                     // ldr	x15, [sp, #8]
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R12, R12       // <--                                  // add	x12, x12, #1
	SUB  $512, R11, R11     // <--                                  // sub	x11, x11, #512
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	ADD  $(1<<12), R0, R0   // <--                                  // add	x0, x0, #1, lsl #12
	MOVD R17, R2            // <--                                  // mov	x2, x17
	CMP  R15, R17           // <--                                  // cmp	x17, x15
	BCS  LBB5_18            // <--                                  // b.hs	.LBB5_18

LBB5_4:
	CMP  R15, R13         // <--                                  // cmp	x13, x15
	ADD  $512, R2, R17    // <--                                  // add	x17, x2, #512
	CSEL LO, R13, R15, R3 // <--                                  // csel	x3, x13, x15, lo
	CMP  R15, R17         // <--                                  // cmp	x17, x15
	CSEL LO, R17, R15, R8 // <--                                  // csel	x8, x17, x15, lo
	CMP  R8, R2           // <--                                  // cmp	x2, x8
	BCS  LBB5_3           // <--                                  // b.hs	.LBB5_3
	LSL  $9, R12, R8      // <--                                  // lsl	x8, x12, #9
	ADD  R11, R3, R6      // <--                                  // add	x6, x3, x11
	SUB  R8, R3, R4       // <--                                  // sub	x4, x3, x8
	CMP  R16, R4          // <--                                  // cmp	x4, x16
	BCS  LBB5_10          // <--                                  // b.hs	.LBB5_10
	MOVD ZR, R2           // <--                                  // mov	x2, xzr

LBB5_7:
	WORD $0xf862782f   // MOVD (R1)(R2<<3), R15                // ldr	x15, [x1, x2, lsl #3]
	MOVD ZR, R8        // <--                                  // mov	x8, xzr
	ADD  R10, R15, R15 // <--                                  // add	x15, x15, x10

LBB5_8:
	LSL  $3, R8, R3  // <--                                  // lsl	x3, x8, #3
	ADD  $1, R8, R8  // <--                                  // add	x8, x8, #1
	CMP  R8, R6      // <--                                  // cmp	x6, x8
	WORD $0xf86369e4 // MOVD (R15)(R3), R4                   // ldr	x4, [x15, x3]
	WORD $0xf8636805 // MOVD (R0)(R3), R5                    // ldr	x5, [x0, x3]
	BIC  R4, R5, R4  // <--                                  // bic	x4, x5, x4
	WORD $0xf8236804 // MOVD R4, (R0)(R3)                    // str	x4, [x0, x3]
	BNE  LBB5_8      // <--                                  // b.ne	.LBB5_8
	ADD  $1, R2, R2  // <--                                  // add	x2, x2, #1
	CMP  R9, R2      // <--                                  // cmp	x2, x9
	BNE  LBB5_7      // <--                                  // b.ne	.LBB5_7
	JMP  LBB5_3      // <--                                  // b	.LBB5_3

LBB5_10:
	UDIV R16, R6, R15  // <--                                  // udiv	x15, x6, x16
	WORD $0xf94003f5   // MOVD (RSP), R21                      // ldr	x21, [sp]
	MVN  R8, R8        // <--                                  // mvn	x8, x8
	LSL  $12, R12, R6  // <--                                  // lsl	x6, x12, #12
	ADD  R8, R3, R8    // <--                                  // add	x8, x3, x8
	ADD  R6, R14, R7   // <--                                  // add	x7, x14, x6
	LSL  $3, R8, R8    // <--                                  // lsl	x8, x8, #3
	MOVD ZR, R5        // <--                                  // mov	x5, xzr
	ADD  R8, R7, R20   // <--                                  // add	x20, x7, x8
	ADD  R8, R6, R19   // <--                                  // add	x19, x6, x8
	ADD  $8, R20, R20  // <--                                  // add	x20, x20, #8
	LSL  $5, R21, R22  // <--                                  // lsl	x22, x21, #5
	LSL  $4, R21, R23  // <--                                  // lsl	x23, x21, #4
	MUL  R15, R21, R15 // <--                                  // mul	x15, x21, x15
	LSL  $2, R15, R8   // <--                                  // lsl	x8, x15, #2
	JMP  LBB5_12       // <--                                  // b	.LBB5_12

LBB5_11:
	ADD $1, R5, R5 // <--                                  // add	x5, x5, #1
	CMP R9, R5     // <--                                  // cmp	x5, x9
	BEQ LBB5_3     // <--                                  // b.eq	.LBB5_3

LBB5_12:
	WORD $0xf8657838      // MOVD (R1)(R5<<3), R24                // ldr	x24, [x1, x5, lsl #3]
	MOVD R2, R25          // <--                                  // mov	x25, x2
	ADD  R19, R24, R15    // <--                                  // add	x15, x24, x19
	ADD  R6, R24, R21     // <--                                  // add	x21, x24, x6
	ADD  $8, R15, R15     // <--                                  // add	x15, x15, #8
	CMP  R15, R7          // <--                                  // cmp	x7, x15
	CCMP LO, R21, R20, $2 // <--                                  // ccmp	x21, x20, #2, lo
	BCC  LBB5_16          // <--                                  // b.lo	.LBB5_16
	UDIV R16, R4, R15     // <--                                  // udiv	x15, x4, x16
	ADD  R10, R24, R30    // <--                                  // add	x30, x24, x10
	MOVD R8, R21          // <--                                  // mov	x21, x8
	MUL  R16, R15, R15    // <--                                  // mul	x15, x15, x16
	SUB  R15, R4, R26     // <--                                  // sub	x26, x4, x15
	ADD  R15, R2, R25     // <--                                  // add	x25, x2, x15
	MOVD R0, R15          // <--                                  // mov	x15, x0

LBB5_14:
	WORD $0xa5e0a3c0   // ?                                    // ld1d	{ z0.d }, p0/z, [x30]
	WORD $0xa41747c1   // ?                                    // ld1b	{ z1.b }, p1/z, [x30, x23]
	WORD $0xa5e0a1e2   // ?                                    // ld1d	{ z2.d }, p0/z, [x15]
	WORD $0xa41745e3   // ?                                    // ld1b	{ z3.b }, p1/z, [x15, x23]
	SUBS R16, R21, R21 // <--                                  // subs	x21, x21, x16
	ADD  R22, R30, R30 // <--                                  // add	x30, x30, x22
	WORD $0x04e03040   // ?                                    // bic	z0.d, z2.d, z0.d
	WORD $0x04e13061   // ?                                    // bic	z1.d, z3.d, z1.d
	WORD $0xe5e0e1e0   // ?                                    // st1d	{ z0.d }, p0, [x15]
	WORD $0xe41745e1   // ?                                    // st1b	{ z1.b }, p1, [x15, x23]
	ADD  R22, R15, R15 // <--                                  // add	x15, x15, x22
	BNE  LBB5_14       // <--                                  // b.ne	.LBB5_14
	CBZ  R26, LBB5_11  // <--                                  // cbz	x26, .LBB5_11

LBB5_16:
	LSL $3, R25, R21  // <--                                  // lsl	x21, x25, #3
	SUB R25, R3, R26  // <--                                  // sub	x26, x3, x25
	ADD R21, R14, R15 // <--                                  // add	x15, x14, x21
	ADD R21, R24, R21 // <--                                  // add	x21, x24, x21

LBB5_17:
	WORD $0xf84086b8   // MOVD.P 8(R21), R24                   // ldr	x24, [x21], #8
	WORD $0xf94001f9   // MOVD (R15), R25                      // ldr	x25, [x15]
	SUBS $1, R26, R26  // <--                                  // subs	x26, x26, #1
	BIC  R24, R25, R24 // <--                                  // bic	x24, x25, x24
	WORD $0xf80085f8   // MOVD.P R24, 8(R15)                   // str	x24, [x15], #8
	BNE  LBB5_17       // <--                                  // b.ne	.LBB5_17
	JMP  LBB5_11       // <--                                  // b	.LBB5_11

LBB5_18:
	MOVD R29, RSP            // <--                                  // mov	sp, x29
	LDP  64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP  48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP  32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP  16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                      // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                      // <--                                  // ret

TEXT ·_or_many_sve(SB), 0, $96-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                       // (skipped)                            // stp	x29, x30, [sp, #-80]!
	SUB  $16, RSP, R9         // <--                                  // sub	x9, sp, #16
	STP  (R26, R25), 16(RSP)  // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP)  // <--                                  // stp	x24, x23, [sp, #32]
	NOP                       // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP)  // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP)  // <--                                  // stp	x20, x19, [sp, #64]
	AND  $-8, R9, RSP         // <--                                  // and	sp, x9, #0xfffffffffffffff8
	ANDS $4294967295, R2, R15 // <--                                  // ands	x15, x2, #0xffffffff
	BEQ  LBB6_18              // <--                                  // b.eq	.LBB6_18
	LSR  $32, R2, R9          // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB6_18          // <--                                  // cbz	x9, .LBB6_18
	WORD $0x04bf5028          // ?                                    // rdvl	x8, #1
	MOVD R0, R14              // <--                                  // mov	x14, x0
	MOVD ZR, R10              // <--                                  // mov	x10, xzr
	MOVD ZR, R11              // <--                                  // mov	x11, xzr
	MOVD ZR, R12              // <--                                  // mov	x12, xzr
	MOVD ZR, R2               // <--                                  // mov	x2, xzr
	MOVW $512, R13            // <--                                  // mov	w13, #512
	LSR  $4, R8, R8           // <--                                  // lsr	x8, x8, #4
	WORD $0x04a0e3f0          // ?                                    // cntw	x16
	WORD $0x25d8e3e0          // ?                                    // ptrue	p0.d
	WORD $0x2518e3e1          // ?                                    // ptrue	p1.b
	STP  (R8, R15), (RSP)     // <--                                  // stp	x8, x15, [sp]
	JMP  LBB6_4               // <--                                  // b	.LBB6_4

LBB6_3:
	WORD $0xf94007ef        // MOVD 8(RSP), R15                     // ldr	x15, [sp, #8]
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R12, R12       // <--                                  // add	x12, x12, #1
	SUB  $512, R11, R11     // <--                                  // sub	x11, x11, #512
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	ADD  $(1<<12), R0, R0   // <--                                  // add	x0, x0, #1, lsl #12
	MOVD R17, R2            // <--                                  // mov	x2, x17
	CMP  R15, R17           // <--                                  // cmp	x17, x15
	BCS  LBB6_18            // <--                                  // b.hs	.LBB6_18

LBB6_4:
	CMP  R15, R13         // <--                                  // cmp	x13, x15
	ADD  $512, R2, R17    // <--                                  // add	x17, x2, #512
	CSEL LO, R13, R15, R3 // <--                                  // csel	x3, x13, x15, lo
	CMP  R15, R17         // <--                                  // cmp	x17, x15
	CSEL LO, R17, R15, R8 // <--                                  // csel	x8, x17, x15, lo
	CMP  R8, R2           // <--                                  // cmp	x2, x8
	BCS  LBB6_3           // <--                                  // b.hs	.LBB6_3
	LSL  $9, R12, R8      // <--                                  // lsl	x8, x12, #9
	ADD  R11, R3, R6      // <--                                  // add	x6, x3, x11
	SUB  R8, R3, R4       // <--                                  // sub	x4, x3, x8
	CMP  R16, R4          // <--                                  // cmp	x4, x16
	BCS  LBB6_10          // <--                                  // b.hs	.LBB6_10
	MOVD ZR, R2           // <--                                  // mov	x2, xzr

LBB6_7:
	WORD $0xf862782f   // MOVD (R1)(R2<<3), R15                // ldr	x15, [x1, x2, lsl #3]
	MOVD ZR, R8        // <--                                  // mov	x8, xzr
	ADD  R10, R15, R15 // <--                                  // add	x15, x15, x10

LBB6_8:
	LSL  $3, R8, R3  // <--                                  // lsl	x3, x8, #3
	ADD  $1, R8, R8  // <--                                  // add	x8, x8, #1
	CMP  R8, R6      // <--                                  // cmp	x6, x8
	WORD $0xf86369e4 // MOVD (R15)(R3), R4                   // ldr	x4, [x15, x3]
	WORD $0xf8636805 // MOVD (R0)(R3), R5                    // ldr	x5, [x0, x3]
	ORR  R4, R5, R4  // <--                                  // orr	x4, x5, x4
	WORD $0xf8236804 // MOVD R4, (R0)(R3)                    // str	x4, [x0, x3]
	BNE  LBB6_8      // <--                                  // b.ne	.LBB6_8
	ADD  $1, R2, R2  // <--                                  // add	x2, x2, #1
	CMP  R9, R2      // <--                                  // cmp	x2, x9
	BNE  LBB6_7      // <--                                  // b.ne	.LBB6_7
	JMP  LBB6_3      // <--                                  // b	.LBB6_3

LBB6_10:
	UDIV R16, R6, R15  // <--                                  // udiv	x15, x6, x16
	WORD $0xf94003f5   // MOVD (RSP), R21                      // ldr	x21, [sp]
	MVN  R8, R8        // <--                                  // mvn	x8, x8
	LSL  $12, R12, R6  // <--                                  // lsl	x6, x12, #12
	ADD  R8, R3, R8    // <--                                  // add	x8, x3, x8
	ADD  R6, R14, R7   // <--                                  // add	x7, x14, x6
	LSL  $3, R8, R8    // <--                                  // lsl	x8, x8, #3
	MOVD ZR, R5        // <--                                  // mov	x5, xzr
	ADD  R8, R7, R20   // <--                                  // add	x20, x7, x8
	ADD  R8, R6, R19   // <--                                  // add	x19, x6, x8
	ADD  $8, R20, R20  // <--                                  // add	x20, x20, #8
	LSL  $5, R21, R22  // <--                                  // lsl	x22, x21, #5
	LSL  $4, R21, R23  // <--                                  // lsl	x23, x21, #4
	MUL  R15, R21, R15 // <--                                  // mul	x15, x21, x15
	LSL  $2, R15, R8   // <--                                  // lsl	x8, x15, #2
	JMP  LBB6_12       // <--                                  // b	.LBB6_12

LBB6_11:
	ADD $1, R5, R5 // <--                                  // add	x5, x5, #1
	CMP R9, R5     // <--                                  // cmp	x5, x9
	BEQ LBB6_3     // <--                                  // b.eq	.LBB6_3

LBB6_12:
	WORD $0xf8657838      // MOVD (R1)(R5<<3), R24                // ldr	x24, [x1, x5, lsl #3]
	MOVD R2, R25          // <--                                  // mov	x25, x2
	ADD  R19, R24, R15    // <--                                  // add	x15, x24, x19
	ADD  R6, R24, R21     // <--                                  // add	x21, x24, x6
	ADD  $8, R15, R15     // <--                                  // add	x15, x15, #8
	CMP  R15, R7          // <--                                  // cmp	x7, x15
	CCMP LO, R21, R20, $2 // <--                                  // ccmp	x21, x20, #2, lo
	BCC  LBB6_16          // <--                                  // b.lo	.LBB6_16
	UDIV R16, R4, R15     // <--                                  // udiv	x15, x4, x16
	ADD  R10, R24, R30    // <--                                  // add	x30, x24, x10
	MOVD R8, R21          // <--                                  // mov	x21, x8
	MUL  R16, R15, R15    // <--                                  // mul	x15, x15, x16
	SUB  R15, R4, R26     // <--                                  // sub	x26, x4, x15
	ADD  R15, R2, R25     // <--                                  // add	x25, x2, x15
	MOVD R0, R15          // <--                                  // mov	x15, x0

LBB6_14:
	WORD $0xa5e0a3c0   // ?                                    // ld1d	{ z0.d }, p0/z, [x30]
	WORD $0xa41747c1   // ?                                    // ld1b	{ z1.b }, p1/z, [x30, x23]
	WORD $0xa5e0a1e2   // ?                                    // ld1d	{ z2.d }, p0/z, [x15]
	WORD $0xa41745e3   // ?                                    // ld1b	{ z3.b }, p1/z, [x15, x23]
	SUBS R16, R21, R21 // <--                                  // subs	x21, x21, x16
	ADD  R22, R30, R30 // <--                                  // add	x30, x30, x22
	WORD $0x04603040   // ?                                    // orr	z0.d, z2.d, z0.d
	WORD $0x04613061   // ?                                    // orr	z1.d, z3.d, z1.d
	WORD $0xe5e0e1e0   // ?                                    // st1d	{ z0.d }, p0, [x15]
	WORD $0xe41745e1   // ?                                    // st1b	{ z1.b }, p1, [x15, x23]
	ADD  R22, R15, R15 // <--                                  // add	x15, x15, x22
	BNE  LBB6_14       // <--                                  // b.ne	.LBB6_14
	CBZ  R26, LBB6_11  // <--                                  // cbz	x26, .LBB6_11

LBB6_16:
	LSL $3, R25, R21  // <--                                  // lsl	x21, x25, #3
	SUB R25, R3, R26  // <--                                  // sub	x26, x3, x25
	ADD R21, R14, R15 // <--                                  // add	x15, x14, x21
	ADD R21, R24, R21 // <--                                  // add	x21, x24, x21

LBB6_17:
	WORD $0xf84086b8   // MOVD.P 8(R21), R24                   // ldr	x24, [x21], #8
	WORD $0xf94001f9   // MOVD (R15), R25                      // ldr	x25, [x15]
	SUBS $1, R26, R26  // <--                                  // subs	x26, x26, #1
	ORR  R24, R25, R24 // <--                                  // orr	x24, x25, x24
	WORD $0xf80085f8   // MOVD.P R24, 8(R15)                   // str	x24, [x15], #8
	BNE  LBB6_17       // <--                                  // b.ne	.LBB6_17
	JMP  LBB6_11       // <--                                  // b	.LBB6_11

LBB6_18:
	MOVD R29, RSP            // <--                                  // mov	sp, x29
	LDP  64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP  48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP  32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP  16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                      // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                      // <--                                  // ret

TEXT ·_xor_many_sve(SB), 0, $96-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD dims+16(FP), R2
	NOP                       // (skipped)                            // stp	x29, x30, [sp, #-80]!
	SUB  $16, RSP, R9         // <--                                  // sub	x9, sp, #16
	STP  (R26, R25), 16(RSP)  // <--                                  // stp	x26, x25, [sp, #16]
	STP  (R24, R23), 32(RSP)  // <--                                  // stp	x24, x23, [sp, #32]
	NOP                       // (skipped)                            // mov	x29, sp
	STP  (R22, R21), 48(RSP)  // <--                                  // stp	x22, x21, [sp, #48]
	STP  (R20, R19), 64(RSP)  // <--                                  // stp	x20, x19, [sp, #64]
	AND  $-8, R9, RSP         // <--                                  // and	sp, x9, #0xfffffffffffffff8
	ANDS $4294967295, R2, R15 // <--                                  // ands	x15, x2, #0xffffffff
	BEQ  LBB7_18              // <--                                  // b.eq	.LBB7_18
	LSR  $32, R2, R9          // <--                                  // lsr	x9, x2, #32
	CBZ  R9, LBB7_18          // <--                                  // cbz	x9, .LBB7_18
	WORD $0x04bf5028          // ?                                    // rdvl	x8, #1
	MOVD R0, R14              // <--                                  // mov	x14, x0
	MOVD ZR, R10              // <--                                  // mov	x10, xzr
	MOVD ZR, R11              // <--                                  // mov	x11, xzr
	MOVD ZR, R12              // <--                                  // mov	x12, xzr
	MOVD ZR, R2               // <--                                  // mov	x2, xzr
	MOVW $512, R13            // <--                                  // mov	w13, #512
	LSR  $4, R8, R8           // <--                                  // lsr	x8, x8, #4
	WORD $0x04a0e3f0          // ?                                    // cntw	x16
	WORD $0x25d8e3e0          // ?                                    // ptrue	p0.d
	WORD $0x2518e3e1          // ?                                    // ptrue	p1.b
	STP  (R8, R15), (RSP)     // <--                                  // stp	x8, x15, [sp]
	JMP  LBB7_4               // <--                                  // b	.LBB7_4

LBB7_3:
	WORD $0xf94007ef        // MOVD 8(RSP), R15                     // ldr	x15, [sp, #8]
	ADD  $512, R13, R13     // <--                                  // add	x13, x13, #512
	ADD  $1, R12, R12       // <--                                  // add	x12, x12, #1
	SUB  $512, R11, R11     // <--                                  // sub	x11, x11, #512
	ADD  $(1<<12), R10, R10 // <--                                  // add	x10, x10, #1, lsl #12
	ADD  $(1<<12), R0, R0   // <--                                  // add	x0, x0, #1, lsl #12
	MOVD R17, R2            // <--                                  // mov	x2, x17
	CMP  R15, R17           // <--                                  // cmp	x17, x15
	BCS  LBB7_18            // <--                                  // b.hs	.LBB7_18

LBB7_4:
	CMP  R15, R13         // <--                                  // cmp	x13, x15
	ADD  $512, R2, R17    // <--                                  // add	x17, x2, #512
	CSEL LO, R13, R15, R3 // <--                                  // csel	x3, x13, x15, lo
	CMP  R15, R17         // <--                                  // cmp	x17, x15
	CSEL LO, R17, R15, R8 // <--                                  // csel	x8, x17, x15, lo
	CMP  R8, R2           // <--                                  // cmp	x2, x8
	BCS  LBB7_3           // <--                                  // b.hs	.LBB7_3
	LSL  $9, R12, R8      // <--                                  // lsl	x8, x12, #9
	ADD  R11, R3, R6      // <--                                  // add	x6, x3, x11
	SUB  R8, R3, R4       // <--                                  // sub	x4, x3, x8
	CMP  R16, R4          // <--                                  // cmp	x4, x16
	BCS  LBB7_10          // <--                                  // b.hs	.LBB7_10
	MOVD ZR, R2           // <--                                  // mov	x2, xzr

LBB7_7:
	WORD $0xf862782f   // MOVD (R1)(R2<<3), R15                // ldr	x15, [x1, x2, lsl #3]
	MOVD ZR, R8        // <--                                  // mov	x8, xzr
	ADD  R10, R15, R15 // <--                                  // add	x15, x15, x10

LBB7_8:
	LSL  $3, R8, R3  // <--                                  // lsl	x3, x8, #3
	ADD  $1, R8, R8  // <--                                  // add	x8, x8, #1
	CMP  R8, R6      // <--                                  // cmp	x6, x8
	WORD $0xf86369e4 // MOVD (R15)(R3), R4                   // ldr	x4, [x15, x3]
	WORD $0xf8636805 // MOVD (R0)(R3), R5                    // ldr	x5, [x0, x3]
	EOR  R4, R5, R4  // <--                                  // eor	x4, x5, x4
	WORD $0xf8236804 // MOVD R4, (R0)(R3)                    // str	x4, [x0, x3]
	BNE  LBB7_8      // <--                                  // b.ne	.LBB7_8
	ADD  $1, R2, R2  // <--                                  // add	x2, x2, #1
	CMP  R9, R2      // <--                                  // cmp	x2, x9
	BNE  LBB7_7      // <--                                  // b.ne	.LBB7_7
	JMP  LBB7_3      // <--                                  // b	.LBB7_3

LBB7_10:
	UDIV R16, R6, R15  // <--                                  // udiv	x15, x6, x16
	WORD $0xf94003f5   // MOVD (RSP), R21                      // ldr	x21, [sp]
	MVN  R8, R8        // <--                                  // mvn	x8, x8
	LSL  $12, R12, R6  // <--                                  // lsl	x6, x12, #12
	ADD  R8, R3, R8    // <--                                  // add	x8, x3, x8
	ADD  R6, R14, R7   // <--                                  // add	x7, x14, x6
	LSL  $3, R8, R8    // <--                                  // lsl	x8, x8, #3
	MOVD ZR, R5        // <--                                  // mov	x5, xzr
	ADD  R8, R7, R20   // <--                                  // add	x20, x7, x8
	ADD  R8, R6, R19   // <--                                  // add	x19, x6, x8
	ADD  $8, R20, R20  // <--                                  // add	x20, x20, #8
	LSL  $5, R21, R22  // <--                                  // lsl	x22, x21, #5
	LSL  $4, R21, R23  // <--                                  // lsl	x23, x21, #4
	MUL  R15, R21, R15 // <--                                  // mul	x15, x21, x15
	LSL  $2, R15, R8   // <--                                  // lsl	x8, x15, #2
	JMP  LBB7_12       // <--                                  // b	.LBB7_12

LBB7_11:
	ADD $1, R5, R5 // <--                                  // add	x5, x5, #1
	CMP R9, R5     // <--                                  // cmp	x5, x9
	BEQ LBB7_3     // <--                                  // b.eq	.LBB7_3

LBB7_12:
	WORD $0xf8657838      // MOVD (R1)(R5<<3), R24                // ldr	x24, [x1, x5, lsl #3]
	MOVD R2, R25          // <--                                  // mov	x25, x2
	ADD  R19, R24, R15    // <--                                  // add	x15, x24, x19
	ADD  R6, R24, R21     // <--                                  // add	x21, x24, x6
	ADD  $8, R15, R15     // <--                                  // add	x15, x15, #8
	CMP  R15, R7          // <--                                  // cmp	x7, x15
	CCMP LO, R21, R20, $2 // <--                                  // ccmp	x21, x20, #2, lo
	BCC  LBB7_16          // <--                                  // b.lo	.LBB7_16
	UDIV R16, R4, R15     // <--                                  // udiv	x15, x4, x16
	ADD  R10, R24, R30    // <--                                  // add	x30, x24, x10
	MOVD R8, R21          // <--                                  // mov	x21, x8
	MUL  R16, R15, R15    // <--                                  // mul	x15, x15, x16
	SUB  R15, R4, R26     // <--                                  // sub	x26, x4, x15
	ADD  R15, R2, R25     // <--                                  // add	x25, x2, x15
	MOVD R0, R15          // <--                                  // mov	x15, x0

LBB7_14:
	WORD $0xa5e0a3c0   // ?                                    // ld1d	{ z0.d }, p0/z, [x30]
	WORD $0xa41747c1   // ?                                    // ld1b	{ z1.b }, p1/z, [x30, x23]
	WORD $0xa5e0a1e2   // ?                                    // ld1d	{ z2.d }, p0/z, [x15]
	WORD $0xa41745e3   // ?                                    // ld1b	{ z3.b }, p1/z, [x15, x23]
	SUBS R16, R21, R21 // <--                                  // subs	x21, x21, x16
	ADD  R22, R30, R30 // <--                                  // add	x30, x30, x22
	WORD $0x04a03040   // ?                                    // eor	z0.d, z2.d, z0.d
	WORD $0x04a13061   // ?                                    // eor	z1.d, z3.d, z1.d
	WORD $0xe5e0e1e0   // ?                                    // st1d	{ z0.d }, p0, [x15]
	WORD $0xe41745e1   // ?                                    // st1b	{ z1.b }, p1, [x15, x23]
	ADD  R22, R15, R15 // <--                                  // add	x15, x15, x22
	BNE  LBB7_14       // <--                                  // b.ne	.LBB7_14
	CBZ  R26, LBB7_11  // <--                                  // cbz	x26, .LBB7_11

LBB7_16:
	LSL $3, R25, R21  // <--                                  // lsl	x21, x25, #3
	SUB R25, R3, R26  // <--                                  // sub	x26, x3, x25
	ADD R21, R14, R15 // <--                                  // add	x15, x14, x21
	ADD R21, R24, R21 // <--                                  // add	x21, x24, x21

LBB7_17:
	WORD $0xf84086b8   // MOVD.P 8(R21), R24                   // ldr	x24, [x21], #8
	WORD $0xf94001f9   // MOVD (R15), R25                      // ldr	x25, [x15]
	SUBS $1, R26, R26  // <--                                  // subs	x26, x26, #1
	EOR  R24, R25, R24 // <--                                  // eor	x24, x25, x24
	WORD $0xf80085f8   // MOVD.P R24, 8(R15)                   // str	x24, [x15], #8
	BNE  LBB7_17       // <--                                  // b.ne	.LBB7_17
	JMP  LBB7_11       // <--                                  // b	.LBB7_11

LBB7_18:
	MOVD R29, RSP            // <--                                  // mov	sp, x29
	LDP  64(RSP), (R20, R19) // <--                                  // ldp	x20, x19, [sp, #64]
	LDP  48(RSP), (R22, R21) // <--                                  // ldp	x22, x21, [sp, #48]
	LDP  32(RSP), (R24, R23) // <--                                  // ldp	x24, x23, [sp, #32]
	LDP  16(RSP), (R26, R25) // <--                                  // ldp	x26, x25, [sp, #16]
	NOP                      // (skipped)                            // ldp	x29, x30, [sp], #80
	RET                      // <--                                  // ret

TEXT ·_count_sve(SB), NOSPLIT, $0-32
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD a_cap+16(FP), R2
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	NOP                   // (skipped)                            // mov	x29, sp
	CBZ  R1, LBB8_3       // <--                                  // cbz	x1, .LBB8_3
	WORD $0x04a0e3e8      // ?                                    // cntw	x8
	CMP  R1, R8           // <--                                  // cmp	x8, x1
	BLS  LBB8_4           // <--                                  // b.ls	.LBB8_4
	MOVD ZR, R9           // <--                                  // mov	x9, xzr
	MOVD ZR, R8           // <--                                  // mov	x8, xzr
	JMP  LBB8_7           // <--                                  // b	.LBB8_7

LBB8_3:
	MOVD ZR, R8 // <--                                  // mov	x8, xzr
	JMP  LBB8_9 // <--                                  // b	.LBB8_9

LBB8_4:
	UDIV R8, R1, R9      // <--                                  // udiv	x9, x1, x8
	WORD $0x04bf502b     // ?                                    // rdvl	x11, #1
	LSR  $4, R11, R12    // <--                                  // lsr	x12, x11, #4
	MOVD ZR, R10         // <--                                  // mov	x10, xzr
	WORD $0x25f8c000     // ?                                    // mov	z0.d, #0
	WORD $0x25d8e3e0     // ?                                    // ptrue	p0.d
	ADD  R12<<4, R0, R12 // <--                                  // add	x12, x0, x12, lsl #4
	WORD $0x04603001     // ?                                    // mov	z1.d, z0.d
	MUL  R8, R9, R9      // <--                                  // mul	x9, x9, x8
	SUB  R9, R1, R11     // <--                                  // sub	x11, x1, x9

LBB8_5:
	WORD  $0xa5ea4002  // ?                                    // ld1d	{ z2.d }, p0/z, [x0, x10, lsl #3]
	WORD  $0xa5ea4183  // ?                                    // ld1d	{ z3.d }, p0/z, [x12, x10, lsl #3]
	ADD   R8, R10, R10 // <--                                  // add	x10, x10, x8
	CMP   R10, R9      // <--                                  // cmp	x9, x10
	WORD  $0x04daa042  // ?                                    // cnt	z2.d, p0/m, z2.d
	WORD  $0x04daa063  // ?                                    // cnt	z3.d, p0/m, z3.d
	WORD  $0x04e00040  // ?                                    // add	z0.d, z2.d, z0.d
	WORD  $0x04e10061  // ?                                    // add	z1.d, z3.d, z1.d
	BNE   LBB8_5       // <--                                  // b.ne	.LBB8_5
	WORD  $0x04e00020  // ?                                    // add	z0.d, z1.d, z0.d
	WORD  $0x04c12000  // ?                                    // uaddv	d0, p0, z0.d
	FMOVD F0, R8       // <--                                  // fmov	x8, d0
	CBZ   R11, LBB8_9  // <--                                  // cbz	x11, .LBB8_9

LBB8_7:
	ADD R9<<3, R0, R10 // <--                                  // add	x10, x0, x9, lsl #3
	SUB R9, R1, R9     // <--                                  // sub	x9, x1, x9

LBB8_8:
	WORD  $0xfc408540 // FMOVD.P 8(R10), F0                   // ldr	d0, [x10], #8
	SUBS  $1, R9, R9  // <--                                  // subs	x9, x9, #1
	WORD  $0x0e205800 // VCNT V0.B8, V0.B8                    // cnt	v0.8b, v0.8b
	WORD  $0x2e303800 // VUADDLV V0.B8, V0                    // uaddlv	h0, v0.8b
	FMOVS F0, R11     // <--                                  // fmov	w11, s0
	ADD   R8, R11, R8 // <--                                  // add	x8, x11, x8
	BNE   LBB8_8      // <--                                  // b.ne	.LBB8_8

LBB8_9:
	MOVD R8, R0         // <--                                  // mov	x0, x8
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+24(FP) // <--
	RET                 // <--                                  // ret
