//go:build !noasm && amd64
// Code generated by gocc -- DO NOT EDIT.

#include "textflag.h"

TEXT ·_and_avx512(SB), NOSPLIT, $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	NOP                      // <--                                  // push	rbp
	NOP                      // <--                                  // mov	rbp, rsp
	NOP                      // <--                                  // and	rsp, -8
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB0_13             // <--                                  // je	.LBB0_13
	LONG $0x20fa8348         // CMPQ $0x20, DX                       // cmp	rdx, 32
	JB   LBB0_2              // <--                                  // jb	.LBB0_2
	LEAQ 0(SI)(DX*8), AX     // <--                                  // lea	rax, [rsi + 8*rdx]
	WORD $0x3948; BYTE $0xf8 // CMPQ DI, AX                          // cmp	rax, rdi
	JBE  LBB0_6              // <--                                  // jbe	.LBB0_6
	LEAQ 0(DI)(DX*8), AX     // <--                                  // lea	rax, [rdi + 8*rdx]
	WORD $0x3948; BYTE $0xf0 // CMPQ SI, AX                          // cmp	rax, rsi
	JBE  LBB0_6              // <--                                  // jbe	.LBB0_6

LBB0_2:
	XORL AX, AX // <--                                  // xor	eax, eax

LBB0_9:
	MOVQ AX, CX              // <--                                  // mov	rcx, rax
	NOTQ CX                  // <--                                  // not	rcx
	WORD $0x0148; BYTE $0xd1 // ADDQ DX, CX                          // add	rcx, rdx
	MOVQ DX, R8              // <--                                  // mov	r8, rdx
	ANDQ $0x3, R8            // <--                                  // and	r8, 3
	JE   LBB0_11             // <--                                  // je	.LBB0_11

LBB0_10:
	MOVQ 0(SI)(AX*8), R9 // <--                                  // mov	r9, qword ptr [rsi + 8*rax]
	ANDQ R9, 0(DI)(AX*8) // <--                                  // and	qword ptr [rdi + 8*rax], r9
	INCQ AX              // <--                                  // inc	rax
	DECQ R8              // <--                                  // dec	r8
	JNE  LBB0_10         // <--                                  // jne	.LBB0_10

LBB0_11:
	LONG $0x03f98348 // CMPQ $0x3, CX                        // cmp	rcx, 3
	JB   LBB0_13     // <--                                  // jb	.LBB0_13

LBB0_12:
	MOVQ 0(SI)(AX*8), CX     // <--                                  // mov	rcx, qword ptr [rsi + 8*rax]
	ANDQ CX, 0(DI)(AX*8)     // <--                                  // and	qword ptr [rdi + 8*rax], rcx
	MOVQ 0x8(SI)(AX*8), CX   // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 8]
	ANDQ CX, 0x8(DI)(AX*8)   // <--                                  // and	qword ptr [rdi + 8*rax + 8], rcx
	MOVQ 0x10(SI)(AX*8), CX  // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 16]
	ANDQ CX, 0x10(DI)(AX*8)  // <--                                  // and	qword ptr [rdi + 8*rax + 16], rcx
	MOVQ 0x18(SI)(AX*8), CX  // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 24]
	ANDQ CX, 0x18(DI)(AX*8)  // <--                                  // and	qword ptr [rdi + 8*rax + 24], rcx
	LONG $0x04c08348         // ADDQ $0x4, AX                        // add	rax, 4
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	JNE  LBB0_12             // <--                                  // jne	.LBB0_12
	JMP  LBB0_13             // <--                                  // jmp	.LBB0_13

LBB0_6:
	MOVQ DX, AX     // <--                                  // mov	rax, rdx
	ANDQ $-0x20, AX // <--                                  // and	rax, -32
	XORL CX, CX     // <--                                  // xor	ecx, ecx

LBB0_7:
	LONG $0x487cf162; WORD $0x0410; BYTE $0xcf // ?                                    // vmovups	zmm0, zmmword ptr [rdi + 8*rcx]
	QUAD $0x01cf4c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rdi + 8*rcx + 64]
	QUAD $0x02cf5410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rdi + 8*rcx + 128]
	QUAD $0x03cf5c10487cf162                   // ?                                    // vmovups	zmm3, zmmword ptr [rdi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0454; BYTE $0xce // ?                                    // vandps	zmm0, zmm0, zmmword ptr [rsi + 8*rcx]
	QUAD $0x01ce4c544874f162                   // ?                                    // vandps	zmm1, zmm1, zmmword ptr [rsi + 8*rcx + 64]
	QUAD $0x02ce5454486cf162                   // ?                                    // vandps	zmm2, zmm2, zmmword ptr [rsi + 8*rcx + 128]
	QUAD $0x03ce5c544864f162                   // ?                                    // vandps	zmm3, zmm3, zmmword ptr [rsi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0411; BYTE $0xcf // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx], zmm0
	QUAD $0x01cf4c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 64], zmm1
	QUAD $0x02cf5411487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 128], zmm2
	QUAD $0x03cf5c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 192], zmm3
	LONG $0x20c18348                           // ADDQ $0x20, CX                       // add	rcx, 32
	WORD $0x3948; BYTE $0xc8                   // CMPQ CX, AX                          // cmp	rax, rcx
	JNE  LBB0_7                                // <--                                  // jne	.LBB0_7
	WORD $0x3948; BYTE $0xd0                   // CMPQ DX, AX                          // cmp	rax, rdx
	JNE  LBB0_9                                // <--                                  // jne	.LBB0_9

LBB0_13:
	NOP        // <--                                  // mov	rsp, rbp
	NOP        // <--                                  // pop	rbp
	VZEROUPPER // <--                                  // vzeroupper
	RET        // <--                                  // ret

TEXT ·_andn_avx512(SB), NOSPLIT, $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	NOP                      // <--                                  // push	rbp
	NOP                      // <--                                  // mov	rbp, rsp
	NOP                      // <--                                  // and	rsp, -8
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB1_13             // <--                                  // je	.LBB1_13
	LONG $0x20fa8348         // CMPQ $0x20, DX                       // cmp	rdx, 32
	JB   LBB1_2              // <--                                  // jb	.LBB1_2
	LEAQ 0(SI)(DX*8), AX     // <--                                  // lea	rax, [rsi + 8*rdx]
	WORD $0x3948; BYTE $0xf8 // CMPQ DI, AX                          // cmp	rax, rdi
	JBE  LBB1_6              // <--                                  // jbe	.LBB1_6
	LEAQ 0(DI)(DX*8), AX     // <--                                  // lea	rax, [rdi + 8*rdx]
	WORD $0x3948; BYTE $0xf0 // CMPQ SI, AX                          // cmp	rax, rsi
	JBE  LBB1_6              // <--                                  // jbe	.LBB1_6

LBB1_2:
	XORL AX, AX // <--                                  // xor	eax, eax

LBB1_9:
	MOVQ AX, CX              // <--                                  // mov	rcx, rax
	NOTQ CX                  // <--                                  // not	rcx
	WORD $0xc2f6; BYTE $0x01 // TESTL $0x1, DL                       // test	dl, 1
	JE   LBB1_11             // <--                                  // je	.LBB1_11
	MOVQ 0(SI)(AX*8), R8     // <--                                  // mov	r8, qword ptr [rsi + 8*rax]
	NOTQ R8                  // <--                                  // not	r8
	ANDQ R8, 0(DI)(AX*8)     // <--                                  // and	qword ptr [rdi + 8*rax], r8
	ORQ  $0x1, AX            // <--                                  // or	rax, 1

LBB1_11:
	WORD $0x0148; BYTE $0xd1 // ADDQ DX, CX                          // add	rcx, rdx
	JE   LBB1_13             // <--                                  // je	.LBB1_13

LBB1_12:
	MOVQ 0(SI)(AX*8), CX     // <--                                  // mov	rcx, qword ptr [rsi + 8*rax]
	NOTQ CX                  // <--                                  // not	rcx
	ANDQ CX, 0(DI)(AX*8)     // <--                                  // and	qword ptr [rdi + 8*rax], rcx
	MOVQ 0x8(SI)(AX*8), CX   // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 8]
	NOTQ CX                  // <--                                  // not	rcx
	ANDQ CX, 0x8(DI)(AX*8)   // <--                                  // and	qword ptr [rdi + 8*rax + 8], rcx
	LONG $0x02c08348         // ADDQ $0x2, AX                        // add	rax, 2
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	JNE  LBB1_12             // <--                                  // jne	.LBB1_12
	JMP  LBB1_13             // <--                                  // jmp	.LBB1_13

LBB1_6:
	MOVQ DX, AX     // <--                                  // mov	rax, rdx
	ANDQ $-0x20, AX // <--                                  // and	rax, -32
	XORL CX, CX     // <--                                  // xor	ecx, ecx

LBB1_7:
	LONG $0x487cf162; WORD $0x0410; BYTE $0xce // ?                                    // vmovups	zmm0, zmmword ptr [rsi + 8*rcx]
	QUAD $0x01ce4c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rsi + 8*rcx + 64]
	QUAD $0x02ce5410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rsi + 8*rcx + 128]
	QUAD $0x03ce5c10487cf162                   // ?                                    // vmovups	zmm3, zmmword ptr [rsi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0455; BYTE $0xcf // ?                                    // vandnps	zmm0, zmm0, zmmword ptr [rdi + 8*rcx]
	QUAD $0x01cf4c554874f162                   // ?                                    // vandnps	zmm1, zmm1, zmmword ptr [rdi + 8*rcx + 64]
	QUAD $0x02cf5455486cf162                   // ?                                    // vandnps	zmm2, zmm2, zmmword ptr [rdi + 8*rcx + 128]
	QUAD $0x03cf5c554864f162                   // ?                                    // vandnps	zmm3, zmm3, zmmword ptr [rdi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0411; BYTE $0xcf // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx], zmm0
	QUAD $0x01cf4c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 64], zmm1
	QUAD $0x02cf5411487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 128], zmm2
	QUAD $0x03cf5c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 192], zmm3
	LONG $0x20c18348                           // ADDQ $0x20, CX                       // add	rcx, 32
	WORD $0x3948; BYTE $0xc8                   // CMPQ CX, AX                          // cmp	rax, rcx
	JNE  LBB1_7                                // <--                                  // jne	.LBB1_7
	WORD $0x3948; BYTE $0xd0                   // CMPQ DX, AX                          // cmp	rax, rdx
	JNE  LBB1_9                                // <--                                  // jne	.LBB1_9

LBB1_13:
	NOP        // <--                                  // mov	rsp, rbp
	NOP        // <--                                  // pop	rbp
	VZEROUPPER // <--                                  // vzeroupper
	RET        // <--                                  // ret

TEXT ·_or_avx512(SB), NOSPLIT, $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	NOP                      // <--                                  // push	rbp
	NOP                      // <--                                  // mov	rbp, rsp
	NOP                      // <--                                  // and	rsp, -8
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB2_13             // <--                                  // je	.LBB2_13
	LONG $0x20fa8348         // CMPQ $0x20, DX                       // cmp	rdx, 32
	JB   LBB2_2              // <--                                  // jb	.LBB2_2
	LEAQ 0(SI)(DX*8), AX     // <--                                  // lea	rax, [rsi + 8*rdx]
	WORD $0x3948; BYTE $0xf8 // CMPQ DI, AX                          // cmp	rax, rdi
	JBE  LBB2_6              // <--                                  // jbe	.LBB2_6
	LEAQ 0(DI)(DX*8), AX     // <--                                  // lea	rax, [rdi + 8*rdx]
	WORD $0x3948; BYTE $0xf0 // CMPQ SI, AX                          // cmp	rax, rsi
	JBE  LBB2_6              // <--                                  // jbe	.LBB2_6

LBB2_2:
	XORL AX, AX // <--                                  // xor	eax, eax

LBB2_9:
	MOVQ AX, CX              // <--                                  // mov	rcx, rax
	NOTQ CX                  // <--                                  // not	rcx
	WORD $0x0148; BYTE $0xd1 // ADDQ DX, CX                          // add	rcx, rdx
	MOVQ DX, R8              // <--                                  // mov	r8, rdx
	ANDQ $0x3, R8            // <--                                  // and	r8, 3
	JE   LBB2_11             // <--                                  // je	.LBB2_11

LBB2_10:
	MOVQ 0(SI)(AX*8), R9 // <--                                  // mov	r9, qword ptr [rsi + 8*rax]
	ORQ  R9, 0(DI)(AX*8) // <--                                  // or	qword ptr [rdi + 8*rax], r9
	INCQ AX              // <--                                  // inc	rax
	DECQ R8              // <--                                  // dec	r8
	JNE  LBB2_10         // <--                                  // jne	.LBB2_10

LBB2_11:
	LONG $0x03f98348 // CMPQ $0x3, CX                        // cmp	rcx, 3
	JB   LBB2_13     // <--                                  // jb	.LBB2_13

LBB2_12:
	MOVQ 0(SI)(AX*8), CX     // <--                                  // mov	rcx, qword ptr [rsi + 8*rax]
	ORQ  CX, 0(DI)(AX*8)     // <--                                  // or	qword ptr [rdi + 8*rax], rcx
	MOVQ 0x8(SI)(AX*8), CX   // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 8]
	ORQ  CX, 0x8(DI)(AX*8)   // <--                                  // or	qword ptr [rdi + 8*rax + 8], rcx
	MOVQ 0x10(SI)(AX*8), CX  // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 16]
	ORQ  CX, 0x10(DI)(AX*8)  // <--                                  // or	qword ptr [rdi + 8*rax + 16], rcx
	MOVQ 0x18(SI)(AX*8), CX  // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 24]
	ORQ  CX, 0x18(DI)(AX*8)  // <--                                  // or	qword ptr [rdi + 8*rax + 24], rcx
	LONG $0x04c08348         // ADDQ $0x4, AX                        // add	rax, 4
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	JNE  LBB2_12             // <--                                  // jne	.LBB2_12
	JMP  LBB2_13             // <--                                  // jmp	.LBB2_13

LBB2_6:
	MOVQ DX, AX     // <--                                  // mov	rax, rdx
	ANDQ $-0x20, AX // <--                                  // and	rax, -32
	XORL CX, CX     // <--                                  // xor	ecx, ecx

LBB2_7:
	LONG $0x487cf162; WORD $0x0410; BYTE $0xcf // ?                                    // vmovups	zmm0, zmmword ptr [rdi + 8*rcx]
	QUAD $0x01cf4c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rdi + 8*rcx + 64]
	QUAD $0x02cf5410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rdi + 8*rcx + 128]
	QUAD $0x03cf5c10487cf162                   // ?                                    // vmovups	zmm3, zmmword ptr [rdi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0456; BYTE $0xce // ?                                    // vorps	zmm0, zmm0, zmmword ptr [rsi + 8*rcx]
	QUAD $0x01ce4c564874f162                   // ?                                    // vorps	zmm1, zmm1, zmmword ptr [rsi + 8*rcx + 64]
	QUAD $0x02ce5456486cf162                   // ?                                    // vorps	zmm2, zmm2, zmmword ptr [rsi + 8*rcx + 128]
	QUAD $0x03ce5c564864f162                   // ?                                    // vorps	zmm3, zmm3, zmmword ptr [rsi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0411; BYTE $0xcf // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx], zmm0
	QUAD $0x01cf4c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 64], zmm1
	QUAD $0x02cf5411487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 128], zmm2
	QUAD $0x03cf5c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 192], zmm3
	LONG $0x20c18348                           // ADDQ $0x20, CX                       // add	rcx, 32
	WORD $0x3948; BYTE $0xc8                   // CMPQ CX, AX                          // cmp	rax, rcx
	JNE  LBB2_7                                // <--                                  // jne	.LBB2_7
	WORD $0x3948; BYTE $0xd0                   // CMPQ DX, AX                          // cmp	rax, rdx
	JNE  LBB2_9                                // <--                                  // jne	.LBB2_9

LBB2_13:
	NOP        // <--                                  // mov	rsp, rbp
	NOP        // <--                                  // pop	rbp
	VZEROUPPER // <--                                  // vzeroupper
	RET        // <--                                  // ret

TEXT ·_xor_avx512(SB), NOSPLIT, $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	NOP                      // <--                                  // push	rbp
	NOP                      // <--                                  // mov	rbp, rsp
	NOP                      // <--                                  // and	rsp, -8
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB3_13             // <--                                  // je	.LBB3_13
	LONG $0x20fa8348         // CMPQ $0x20, DX                       // cmp	rdx, 32
	JB   LBB3_2              // <--                                  // jb	.LBB3_2
	LEAQ 0(SI)(DX*8), AX     // <--                                  // lea	rax, [rsi + 8*rdx]
	WORD $0x3948; BYTE $0xf8 // CMPQ DI, AX                          // cmp	rax, rdi
	JBE  LBB3_6              // <--                                  // jbe	.LBB3_6
	LEAQ 0(DI)(DX*8), AX     // <--                                  // lea	rax, [rdi + 8*rdx]
	WORD $0x3948; BYTE $0xf0 // CMPQ SI, AX                          // cmp	rax, rsi
	JBE  LBB3_6              // <--                                  // jbe	.LBB3_6

LBB3_2:
	XORL AX, AX // <--                                  // xor	eax, eax

LBB3_9:
	MOVQ AX, CX              // <--                                  // mov	rcx, rax
	NOTQ CX                  // <--                                  // not	rcx
	WORD $0x0148; BYTE $0xd1 // ADDQ DX, CX                          // add	rcx, rdx
	MOVQ DX, R8              // <--                                  // mov	r8, rdx
	ANDQ $0x3, R8            // <--                                  // and	r8, 3
	JE   LBB3_11             // <--                                  // je	.LBB3_11

LBB3_10:
	MOVQ 0(SI)(AX*8), R9 // <--                                  // mov	r9, qword ptr [rsi + 8*rax]
	XORQ R9, 0(DI)(AX*8) // <--                                  // xor	qword ptr [rdi + 8*rax], r9
	INCQ AX              // <--                                  // inc	rax
	DECQ R8              // <--                                  // dec	r8
	JNE  LBB3_10         // <--                                  // jne	.LBB3_10

LBB3_11:
	LONG $0x03f98348 // CMPQ $0x3, CX                        // cmp	rcx, 3
	JB   LBB3_13     // <--                                  // jb	.LBB3_13

LBB3_12:
	MOVQ 0(SI)(AX*8), CX     // <--                                  // mov	rcx, qword ptr [rsi + 8*rax]
	XORQ CX, 0(DI)(AX*8)     // <--                                  // xor	qword ptr [rdi + 8*rax], rcx
	MOVQ 0x8(SI)(AX*8), CX   // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 8]
	XORQ CX, 0x8(DI)(AX*8)   // <--                                  // xor	qword ptr [rdi + 8*rax + 8], rcx
	MOVQ 0x10(SI)(AX*8), CX  // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 16]
	XORQ CX, 0x10(DI)(AX*8)  // <--                                  // xor	qword ptr [rdi + 8*rax + 16], rcx
	MOVQ 0x18(SI)(AX*8), CX  // <--                                  // mov	rcx, qword ptr [rsi + 8*rax + 24]
	XORQ CX, 0x18(DI)(AX*8)  // <--                                  // xor	qword ptr [rdi + 8*rax + 24], rcx
	LONG $0x04c08348         // ADDQ $0x4, AX                        // add	rax, 4
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	JNE  LBB3_12             // <--                                  // jne	.LBB3_12
	JMP  LBB3_13             // <--                                  // jmp	.LBB3_13

LBB3_6:
	MOVQ DX, AX     // <--                                  // mov	rax, rdx
	ANDQ $-0x20, AX // <--                                  // and	rax, -32
	XORL CX, CX     // <--                                  // xor	ecx, ecx

LBB3_7:
	LONG $0x487cf162; WORD $0x0410; BYTE $0xcf // ?                                    // vmovups	zmm0, zmmword ptr [rdi + 8*rcx]
	QUAD $0x01cf4c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rdi + 8*rcx + 64]
	QUAD $0x02cf5410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rdi + 8*rcx + 128]
	QUAD $0x03cf5c10487cf162                   // ?                                    // vmovups	zmm3, zmmword ptr [rdi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0457; BYTE $0xce // ?                                    // vxorps	zmm0, zmm0, zmmword ptr [rsi + 8*rcx]
	QUAD $0x01ce4c574874f162                   // ?                                    // vxorps	zmm1, zmm1, zmmword ptr [rsi + 8*rcx + 64]
	QUAD $0x02ce5457486cf162                   // ?                                    // vxorps	zmm2, zmm2, zmmword ptr [rsi + 8*rcx + 128]
	QUAD $0x03ce5c574864f162                   // ?                                    // vxorps	zmm3, zmm3, zmmword ptr [rsi + 8*rcx + 192]
	LONG $0x487cf162; WORD $0x0411; BYTE $0xcf // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx], zmm0
	QUAD $0x01cf4c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 64], zmm1
	QUAD $0x02cf5411487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 128], zmm2
	QUAD $0x03cf5c11487cf162                   // ?                                    // vmovups	zmmword ptr [rdi + 8*rcx + 192], zmm3
	LONG $0x20c18348                           // ADDQ $0x20, CX                       // add	rcx, 32
	WORD $0x3948; BYTE $0xc8                   // CMPQ CX, AX                          // cmp	rax, rcx
	JNE  LBB3_7                                // <--                                  // jne	.LBB3_7
	WORD $0x3948; BYTE $0xd0                   // CMPQ DX, AX                          // cmp	rax, rdx
	JNE  LBB3_9                                // <--                                  // jne	.LBB3_9

LBB3_13:
	NOP        // <--                                  // mov	rsp, rbp
	NOP        // <--                                  // pop	rbp
	VZEROUPPER // <--                                  // vzeroupper
	RET        // <--                                  // ret

TEXT ·_and_many_avx512(SB), 0, $144-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ dims+16(FP), DX
	NOP                          // <--                                  // push	rbp
	NOP                          // <--                                  // mov	rbp, rsp
	MOVQ R15, 104(SP)            // <--                                  // push	r15
	MOVQ R14, 112(SP)            // <--                                  // push	r14
	MOVQ R13, 120(SP)            // <--                                  // push	r13
	MOVQ R12, 128(SP)            // <--                                  // push	r12
	MOVQ BX, 136(SP)             // <--                                  // push	rbx
	ANDQ $-0x8, SP               // <--                                  // and	rsp, -8
	NOP                          // <--                                  // sub	rsp, 104
	MOVQ SI, 0x28(SP)            // <--                                  // mov	qword ptr [rsp + 40], rsi
	MOVL $-0x1, AX               // <--                                  // mov	eax, 4294967295
	MOVQ DX, 0x8(SP)             // <--                                  // mov	qword ptr [rsp + 8], rdx
	ANDQ DX, AX                  // <--                                  // and	rax, rdx
	JE   LBB4_26                 // <--                                  // je	.LBB4_26
	SHRQ $0x20, 0x8(SP)          // <--                                  // shr	qword ptr [rsp + 8], 32
	JE   LBB4_26                 // <--                                  // je	.LBB4_26
	LEAQ 0xc0(DI), CX            // <--                                  // lea	rcx, [rdi + 192]
	LONG $0x000200ba; BYTE $0x00 // MOVL $_andn+224(SB), DX              // mov	edx, 512
	MOVL $0xc0, SI               // <--                                  // mov	esi, 192
	MOVQ SI, 0x18(SP)            // <--                                  // mov	qword ptr [rsp + 24], rsi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	MOVQ SI, 0x20(SP)            // <--                                  // mov	qword ptr [rsp + 32], rsi
	MOVQ DI, R11                 // <--                                  // mov	r11, rdi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	MOVQ SI, 0(SP)               // <--                                  // mov	qword ptr [rsp], rsi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	XORL R8, R8                  // <--                                  // xor	r8d, r8d
	MOVQ AX, 0x30(SP)            // <--                                  // mov	qword ptr [rsp + 48], rax
	JMP  LBB4_3                  // <--                                  // jmp	.LBB4_3

LBB4_25:
	MOVQ 0x40(SP), DX                          // <--                                  // mov	rdx, qword ptr [rsp + 64]
	LONG $0x00c28148; WORD $0x0002; BYTE $0x00 // ADDQ $_andn+224(SB), DX              // add	rdx, 512
	MOVQ 0x10(SP), SI                          // <--                                  // mov	rsi, qword ptr [rsp + 16]
	INCQ SI                                    // <--                                  // inc	rsi
	QUAD $0xfffffe0024048148                   // ADDQ $-0x200, 0(SP)                  // add	qword ptr [rsp], -512
	QUAD $0x0010001824448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x18(SP)    // add	qword ptr [rsp + 24], 4096
	LONG $0x00c18148; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), CX          // add	rcx, 4096
	LONG $0x00c38149; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), R11         // add	r11, 4096
	QUAD $0x0010002024448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x20(SP)    // add	qword ptr [rsp + 32], 4096
	MOVQ 0x30(SP), AX                          // <--                                  // mov	rax, qword ptr [rsp + 48]
	MOVQ 0x38(SP), R8                          // <--                                  // mov	r8, qword ptr [rsp + 56]
	WORD $0x3949; BYTE $0xc0                   // CMPQ AX, R8                          // cmp	r8, rax
	JAE  LBB4_26                               // <--                                  // jae	.LBB4_26

LBB4_3:
	MOVQ SI, 0x10(SP)        // <--                                  // mov	qword ptr [rsp + 16], rsi
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	MOVQ AX, R13             // <--                                  // mov	r13, rax
	MOVQ DX, 0x40(SP)        // <--                                  // mov	qword ptr [rsp + 64], rdx
	LONG $0xea420f4c         // CMOVB DX, R13                        // cmovb	r13, rdx
	LEAQ 0x200(R8), DX       // <--                                  // lea	rdx, [r8 + 512]
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	MOVQ DX, 0x38(SP)        // <--                                  // mov	qword ptr [rsp + 56], rdx
	LONG $0xc2420f48         // CMOVB DX, AX                         // cmovb	rax, rdx
	WORD $0x3949; BYTE $0xc0 // CMPQ AX, R8                          // cmp	r8, rax
	JAE  LBB4_25             // <--                                  // jae	.LBB4_25
	MOVQ 0x10(SP), DX        // <--                                  // mov	rdx, qword ptr [rsp + 16]
	MOVQ DX, AX              // <--                                  // mov	rax, rdx
	SHLQ $0x9, AX            // <--                                  // shl	rax, 9
	MOVQ R13, SI             // <--                                  // mov	rsi, r13
	WORD $0x2948; BYTE $0xc6 // SUBQ AX, SI                          // sub	rsi, rax
	NOTQ AX                  // <--                                  // not	rax
	WORD $0x014c; BYTE $0xe8 // ADDQ R13, AX                         // add	rax, r13
	LONG $0x20fe8348         // CMPQ $0x20, SI                       // cmp	rsi, 32
	JAE  LBB4_5              // <--                                  // jae	.LBB4_5
	MOVL R13, R9             // <--                                  // mov	r9d, r13d
	ANDL $0x3, R9            // <--                                  // and	r9d, 3
	MOVQ 0(SP), R10          // <--                                  // mov	r10, qword ptr [rsp]
	NEGQ R10                 // <--                                  // neg	r10
	XORL BX, BX              // <--                                  // xor	ebx, ebx
	JMP  LBB4_18             // <--                                  // jmp	.LBB4_18

LBB4_24:
	INCQ BX                      // <--                                  // inc	rbx
	LONG $0x245c3b48; BYTE $0x08 // CMPQ 0x8(SP), BX                     // cmp	rbx, qword ptr [rsp + 8]
	JE   LBB4_25                 // <--                                  // je	.LBB4_25

LBB4_18:
	MOVQ 0x28(SP), DX     // <--                                  // mov	rdx, qword ptr [rsp + 40]
	MOVQ 0(DX)(BX*8), R14 // <--                                  // mov	r14, qword ptr [rdx + 8*rbx]
	MOVQ R8, R15          // <--                                  // mov	r15, r8
	LONG $0x03c5f641      // TESTL $0x3, R13                      // test	r13b, 3
	JE   LBB4_22          // <--                                  // je	.LBB4_22
	MOVQ 0x20(SP), DX     // <--                                  // mov	rdx, qword ptr [rsp + 32]
	LEAQ 0(R14)(DX*1), SI // <--                                  // lea	rsi, [r14 + rdx]
	XORL R15, R15         // <--                                  // xor	r15d, r15d

LBB4_20:
	MOVQ 0(SI)(R15*8), R12   // <--                                  // mov	r12, qword ptr [rsi + 8*r15]
	ANDQ R12, 0(R11)(R15*8)  // <--                                  // and	qword ptr [r11 + 8*r15], r12
	INCQ R15                 // <--                                  // inc	r15
	WORD $0x394d; BYTE $0xf9 // CMPQ R15, R9                         // cmp	r9, r15
	JNE  LBB4_20             // <--                                  // jne	.LBB4_20
	WORD $0x014d; BYTE $0xd7 // ADDQ R10, R15                        // add	r15, r10

LBB4_22:
	LONG $0x03f88348 // CMPQ $0x3, AX                        // cmp	rax, 3
	JB   LBB4_24     // <--                                  // jb	.LBB4_24

LBB4_23:
	MOVQ 0(R14)(R15*8), SI    // <--                                  // mov	rsi, qword ptr [r14 + 8*r15]
	ANDQ SI, 0(DI)(R15*8)     // <--                                  // and	qword ptr [rdi + 8*r15], rsi
	MOVQ 0x8(R14)(R15*8), SI  // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 8]
	ANDQ SI, 0x8(DI)(R15*8)   // <--                                  // and	qword ptr [rdi + 8*r15 + 8], rsi
	MOVQ 0x10(R14)(R15*8), SI // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 16]
	ANDQ SI, 0x10(DI)(R15*8)  // <--                                  // and	qword ptr [rdi + 8*r15 + 16], rsi
	MOVQ 0x18(R14)(R15*8), SI // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 24]
	ANDQ SI, 0x18(DI)(R15*8)  // <--                                  // and	qword ptr [rdi + 8*r15 + 24], rsi
	LONG $0x04c78349          // ADDQ $0x4, R15                       // add	r15, 4
	WORD $0x394d; BYTE $0xfd  // CMPQ R15, R13                        // cmp	r13, r15
	JNE  LBB4_23              // <--                                  // jne	.LBB4_23
	JMP  LBB4_24              // <--                                  // jmp	.LBB4_24

LBB4_5:
	MOVL R13, R15            // <--                                  // mov	r15d, r13d
	ANDL $-0x20, R15         // <--                                  // and	r15d, -32
	LONG $0x243c034c         // ADDQ 0(SP), R15                      // add	r15, qword ptr [rsp]
	MOVQ DX, R10             // <--                                  // mov	r10, rdx
	SHLQ $0xc, R10           // <--                                  // shl	r10, 12
	LEAQ 0(DI)(R10*1), DX    // <--                                  // lea	rdx, [rdi + r10]
	LEAQ 0(R10)(AX*8), R9    // <--                                  // lea	r9, [r10 + 8*rax]
	WORD $0x0149; BYTE $0xf9 // ADDQ DI, R9                          // add	r9, rdi
	LONG $0x08c18349         // ADDQ $0x8, R9                        // add	r9, 8
	MOVQ R9, 0x58(SP)        // <--                                  // mov	qword ptr [rsp + 88], r9
	MOVQ R10, 0x60(SP)       // <--                                  // mov	qword ptr [rsp + 96], r10
	LEAQ 0(R10)(AX*8), R9    // <--                                  // lea	r9, [r10 + 8*rax]
	LONG $0x08c18349         // ADDQ $0x8, R9                        // add	r9, 8
	MOVL R13, AX             // <--                                  // mov	eax, r13d
	ANDL $0x1f, AX           // <--                                  // and	eax, 31
	MOVQ AX, 0x48(SP)        // <--                                  // mov	qword ptr [rsp + 72], rax
	WORD $0x2948; BYTE $0xc6 // SUBQ AX, SI                          // sub	rsi, rax
	WORD $0x014c; BYTE $0xc6 // ADDQ R8, SI                          // add	rsi, r8
	MOVQ SI, 0x50(SP)        // <--                                  // mov	qword ptr [rsp + 80], rsi
	XORL R10, R10            // <--                                  // xor	r10d, r10d
	JMP  LBB4_6              // <--                                  // jmp	.LBB4_6

LBB4_16:
	INCQ R10                     // <--                                  // inc	r10
	LONG $0x24543b4c; BYTE $0x08 // CMPQ 0x8(SP), R10                    // cmp	r10, qword ptr [rsp + 8]
	JE   LBB4_25                 // <--                                  // je	.LBB4_25

LBB4_6:
	MOVQ 0x28(SP), AX            // <--                                  // mov	rax, qword ptr [rsp + 40]
	MOVQ 0(AX)(R10*8), AX        // <--                                  // mov	rax, qword ptr [rax + 8*r10]
	LEAQ 0(AX)(R9*1), BX         // <--                                  // lea	rbx, [rax + r9]
	WORD $0x3948; BYTE $0xda     // CMPQ BX, DX                          // cmp	rdx, rbx
	JAE  LBB4_8                  // <--                                  // jae	.LBB4_8
	MOVQ 0x60(SP), SI            // <--                                  // mov	rsi, qword ptr [rsp + 96]
	LEAQ 0(AX)(SI*1), BX         // <--                                  // lea	rbx, [rax + rsi]
	MOVQ R8, R12                 // <--                                  // mov	r12, r8
	LONG $0x245c3b48; BYTE $0x58 // CMPQ 0x58(SP), BX                    // cmp	rbx, qword ptr [rsp + 88]
	JB   LBB4_11                 // <--                                  // jb	.LBB4_11

LBB4_8:
	MOVQ 0x18(SP), SI     // <--                                  // mov	rsi, qword ptr [rsp + 24]
	LEAQ 0(AX)(SI*1), R14 // <--                                  // lea	r14, [rax + rsi]
	XORL BX, BX           // <--                                  // xor	ebx, ebx

LBB4_9:
	QUAD $0xfdd94410487cf162                   // ?                                    // vmovups	zmm0, zmmword ptr [rcx + 8*rbx - 192]
	QUAD $0xfed94c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rcx + 8*rbx - 128]
	QUAD $0xffd95410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rcx + 8*rbx - 64]
	LONG $0x487cf162; WORD $0x1c10; BYTE $0xd9 // ?                                    // vmovups	zmm3, zmmword ptr [rcx + 8*rbx]
	QUAD $0xfdde4454487cd162                   // ?                                    // vandps	zmm0, zmm0, zmmword ptr [r14 + 8*rbx - 192]
	QUAD $0xfede4c544874d162                   // ?                                    // vandps	zmm1, zmm1, zmmword ptr [r14 + 8*rbx - 128]
	QUAD $0xffde5454486cd162                   // ?                                    // vandps	zmm2, zmm2, zmmword ptr [r14 + 8*rbx - 64]
	LONG $0x4864d162; WORD $0x1c54; BYTE $0xde // ?                                    // vandps	zmm3, zmm3, zmmword ptr [r14 + 8*rbx]
	QUAD $0xfdd94411487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 192], zmm0
	QUAD $0xfed94c11487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 128], zmm1
	QUAD $0xffd95411487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 64], zmm2
	LONG $0x487cf162; WORD $0x1c11; BYTE $0xd9 // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx], zmm3
	LONG $0x20c38348                           // ADDQ $0x20, BX                       // add	rbx, 32
	WORD $0x3949; BYTE $0xdf                   // CMPQ BX, R15                         // cmp	r15, rbx
	JNE  LBB4_9                                // <--                                  // jne	.LBB4_9
	MOVQ 0x50(SP), R12                         // <--                                  // mov	r12, qword ptr [rsp + 80]
	LONG $0x247c8348; WORD $0x0048             // CMPQ $0x0, 0x48(SP)                  // cmp	qword ptr [rsp + 72], 0
	JE   LBB4_16                               // <--                                  // je	.LBB4_16

LBB4_11:
	MOVL R13, BX             // <--                                  // mov	ebx, r13d
	WORD $0x2944; BYTE $0xe3 // SUBL R12, BX                         // sub	ebx, r12d
	MOVQ R12, R14            // <--                                  // mov	r14, r12
	NOTQ R14                 // <--                                  // not	r14
	WORD $0x014d; BYTE $0xee // ADDQ R13, R14                        // add	r14, r13
	WORD $0xc3f6; BYTE $0x03 // TESTL $0x3, BL                       // test	bl, 3
	JE   LBB4_14             // <--                                  // je	.LBB4_14
	MOVL R13, BX             // <--                                  // mov	ebx, r13d
	WORD $0x2844; BYTE $0xe3 // SUBL R12, BL                         // sub	bl, r12b
	WORD $0xb60f; BYTE $0xdb // MOVZX BL, BX                         // movzx	ebx, bl
	ANDL $0x3, BX            // <--                                  // and	ebx, 3

LBB4_13:
	MOVQ 0(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12]
	ANDQ SI, 0(DI)(R12*8) // <--                                  // and	qword ptr [rdi + 8*r12], rsi
	INCQ R12              // <--                                  // inc	r12
	DECQ BX               // <--                                  // dec	rbx
	JNE  LBB4_13          // <--                                  // jne	.LBB4_13

LBB4_14:
	LONG $0x03fe8349 // CMPQ $0x3, R14                       // cmp	r14, 3
	JB   LBB4_16     // <--                                  // jb	.LBB4_16

LBB4_15:
	MOVQ 0(AX)(R12*8), SI    // <--                                  // mov	rsi, qword ptr [rax + 8*r12]
	ANDQ SI, 0(DI)(R12*8)    // <--                                  // and	qword ptr [rdi + 8*r12], rsi
	MOVQ 0x8(AX)(R12*8), SI  // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 8]
	ANDQ SI, 0x8(DI)(R12*8)  // <--                                  // and	qword ptr [rdi + 8*r12 + 8], rsi
	MOVQ 0x10(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 16]
	ANDQ SI, 0x10(DI)(R12*8) // <--                                  // and	qword ptr [rdi + 8*r12 + 16], rsi
	MOVQ 0x18(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 24]
	ANDQ SI, 0x18(DI)(R12*8) // <--                                  // and	qword ptr [rdi + 8*r12 + 24], rsi
	LONG $0x04c48349         // ADDQ $0x4, R12                       // add	r12, 4
	WORD $0x394d; BYTE $0xe5 // CMPQ R12, R13                        // cmp	r13, r12
	JNE  LBB4_15             // <--                                  // jne	.LBB4_15
	JMP  LBB4_16             // <--                                  // jmp	.LBB4_16

LBB4_26:
	NOP               // <--                                  // lea	rsp, [rbp - 40]
	MOVQ 136(SP), BX  // <--                                  // pop	rbx
	MOVQ 128(SP), R12 // <--                                  // pop	r12
	MOVQ 120(SP), R13 // <--                                  // pop	r13
	MOVQ 112(SP), R14 // <--                                  // pop	r14
	MOVQ 104(SP), R15 // <--                                  // pop	r15
	NOP               // <--                                  // pop	rbp
	VZEROUPPER        // <--                                  // vzeroupper
	RET               // <--                                  // ret

TEXT ·_andn_many_avx512(SB), 0, $128-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ dims+16(FP), DX
	NOP                            // <--                                  // push	rbp
	NOP                            // <--                                  // mov	rbp, rsp
	MOVQ R15, 88(SP)               // <--                                  // push	r15
	MOVQ R14, 96(SP)               // <--                                  // push	r14
	MOVQ R13, 104(SP)              // <--                                  // push	r13
	MOVQ R12, 112(SP)              // <--                                  // push	r12
	MOVQ BX, 120(SP)               // <--                                  // push	rbx
	ANDQ $-0x8, SP                 // <--                                  // and	rsp, -8
	NOP                            // <--                                  // sub	rsp, 88
	MOVL $-0x1, AX                 // <--                                  // mov	eax, 4294967295
	ANDQ DX, AX                    // <--                                  // and	rax, rdx
	JE   LBB5_23                   // <--                                  // je	.LBB5_23
	SHRQ $0x20, DX                 // <--                                  // shr	rdx, 32
	JE   LBB5_23                   // <--                                  // je	.LBB5_23
	LEAQ 0xc0(DI), CX              // <--                                  // lea	rcx, [rdi + 192]
	LONG $0x0200b841; WORD $0x0000 // MOVL $_andn+224(SB), R8              // mov	r8d, 512
	MOVL $0xc0, R9                 // <--                                  // mov	r9d, 192
	MOVQ R9, 0x18(SP)              // <--                                  // mov	qword ptr [rsp + 24], r9
	XORL R9, R9                    // <--                                  // xor	r9d, r9d
	MOVQ R9, 0x8(SP)               // <--                                  // mov	qword ptr [rsp + 8], r9
	XORL R9, R9                    // <--                                  // xor	r9d, r9d
	XORL R12, R12                  // <--                                  // xor	r12d, r12d
	MOVQ AX, 0x20(SP)              // <--                                  // mov	qword ptr [rsp + 32], rax
	JMP  LBB5_3                    // <--                                  // jmp	.LBB5_3

LBB5_22:
	MOVQ 0x30(SP), R8                          // <--                                  // mov	r8, qword ptr [rsp + 48]
	LONG $0x00c08149; WORD $0x0002; BYTE $0x00 // ADDQ $_andn+224(SB), R8              // add	r8, 512
	MOVQ 0x10(SP), R9                          // <--                                  // mov	r9, qword ptr [rsp + 16]
	INCQ R9                                    // <--                                  // inc	r9
	QUAD $0xfffe000824448148; BYTE $0xff       // ADDQ $-0x200, 0x8(SP)                // add	qword ptr [rsp + 8], -512
	QUAD $0x0010001824448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x18(SP)    // add	qword ptr [rsp + 24], 4096
	LONG $0x00c18148; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), CX          // add	rcx, 4096
	MOVQ 0x20(SP), AX                          // <--                                  // mov	rax, qword ptr [rsp + 32]
	MOVQ 0x28(SP), R12                         // <--                                  // mov	r12, qword ptr [rsp + 40]
	WORD $0x3949; BYTE $0xc4                   // CMPQ AX, R12                         // cmp	r12, rax
	JAE  LBB5_23                               // <--                                  // jae	.LBB5_23

LBB5_3:
	MOVQ R9, 0x10(SP)        // <--                                  // mov	qword ptr [rsp + 16], r9
	WORD $0x3949; BYTE $0xc0 // CMPQ AX, R8                          // cmp	r8, rax
	MOVQ AX, R15             // <--                                  // mov	r15, rax
	MOVQ R8, 0x30(SP)        // <--                                  // mov	qword ptr [rsp + 48], r8
	LONG $0xf8420f4d         // CMOVB R8, R15                        // cmovb	r15, r8
	LEAQ 0x200(R12), R8      // <--                                  // lea	r8, [r12 + 512]
	WORD $0x3949; BYTE $0xc0 // CMPQ AX, R8                          // cmp	r8, rax
	MOVQ R8, 0x28(SP)        // <--                                  // mov	qword ptr [rsp + 40], r8
	LONG $0xc0420f49         // CMOVB R8, AX                         // cmovb	rax, r8
	WORD $0x3949; BYTE $0xc4 // CMPQ AX, R12                         // cmp	r12, rax
	JAE  LBB5_22             // <--                                  // jae	.LBB5_22
	MOVQ 0x10(SP), R8        // <--                                  // mov	r8, qword ptr [rsp + 16]
	MOVQ R8, AX              // <--                                  // mov	rax, r8
	SHLQ $0x9, AX            // <--                                  // shl	rax, 9
	MOVQ R15, R9             // <--                                  // mov	r9, r15
	WORD $0x2949; BYTE $0xc1 // SUBQ AX, R9                          // sub	r9, rax
	LONG $0x20f98349         // CMPQ $0x20, R9                       // cmp	r9, 32
	JAE  LBB5_5              // <--                                  // jae	.LBB5_5
	MOVQ R12, R8             // <--                                  // mov	r8, r12
	ORQ  $0x1, R8            // <--                                  // or	r8, 1
	ORQ  $0x1, AX            // <--                                  // or	rax, 1
	XORL R9, R9              // <--                                  // xor	r9d, r9d
	JMP  LBB5_17             // <--                                  // jmp	.LBB5_17

LBB5_21:
	INCQ R9                  // <--                                  // inc	r9
	WORD $0x3949; BYTE $0xd1 // CMPQ DX, R9                          // cmp	r9, rdx
	JE   LBB5_22             // <--                                  // je	.LBB5_22

LBB5_17:
	MOVQ 0(SI)(R9*8), R10   // <--                                  // mov	r10, qword ptr [rsi + 8*r9]
	MOVQ R12, R11           // <--                                  // mov	r11, r12
	LONG $0x01c7f641        // TESTL $0x1, R15                      // test	r15b, 1
	JE   LBB5_19            // <--                                  // je	.LBB5_19
	MOVQ 0(R10)(R12*8), R11 // <--                                  // mov	r11, qword ptr [r10 + 8*r12]
	NOTQ R11                // <--                                  // not	r11
	ANDQ R11, 0(DI)(R12*8)  // <--                                  // and	qword ptr [rdi + 8*r12], r11
	MOVQ R8, R11            // <--                                  // mov	r11, r8

LBB5_19:
	WORD $0x3949; BYTE $0xc7 // CMPQ AX, R15                         // cmp	r15, rax
	JE   LBB5_21             // <--                                  // je	.LBB5_21

LBB5_20:
	MOVQ 0(R10)(R11*8), BX   // <--                                  // mov	rbx, qword ptr [r10 + 8*r11]
	NOTQ BX                  // <--                                  // not	rbx
	ANDQ BX, 0(DI)(R11*8)    // <--                                  // and	qword ptr [rdi + 8*r11], rbx
	MOVQ 0x8(R10)(R11*8), BX // <--                                  // mov	rbx, qword ptr [r10 + 8*r11 + 8]
	NOTQ BX                  // <--                                  // not	rbx
	ANDQ BX, 0x8(DI)(R11*8)  // <--                                  // and	qword ptr [rdi + 8*r11 + 8], rbx
	LONG $0x02c38349         // ADDQ $0x2, R11                       // add	r11, 2
	WORD $0x394d; BYTE $0xdf // CMPQ R11, R15                        // cmp	r15, r11
	JNE  LBB5_20             // <--                                  // jne	.LBB5_20
	JMP  LBB5_21             // <--                                  // jmp	.LBB5_21

LBB5_5:
	MOVL R15, R13                // <--                                  // mov	r13d, r15d
	ANDL $-0x20, R13             // <--                                  // and	r13d, -32
	LONG $0x246c034c; BYTE $0x08 // ADDQ 0x8(SP), R13                    // add	r13, qword ptr [rsp + 8]
	MOVQ R8, R10                 // <--                                  // mov	r10, r8
	SHLQ $0xc, R10               // <--                                  // shl	r10, 12
	LEAQ 0(DI)(R10*1), BX        // <--                                  // lea	rbx, [rdi + r10]
	NOTQ AX                      // <--                                  // not	rax
	WORD $0x014c; BYTE $0xf8     // ADDQ R15, AX                         // add	rax, r15
	LEAQ 0(R10)(AX*8), R8        // <--                                  // lea	r8, [r10 + 8*rax]
	WORD $0x0149; BYTE $0xf8     // ADDQ DI, R8                          // add	r8, rdi
	LONG $0x08c08349             // ADDQ $0x8, R8                        // add	r8, 8
	MOVQ R8, 0x48(SP)            // <--                                  // mov	qword ptr [rsp + 72], r8
	MOVQ R10, 0x50(SP)           // <--                                  // mov	qword ptr [rsp + 80], r10
	LEAQ 0(R10)(AX*8), AX        // <--                                  // lea	rax, [r10 + 8*rax]
	LONG $0x08c08348             // ADDQ $0x8, AX                        // add	rax, 8
	MOVL R15, R8                 // <--                                  // mov	r8d, r15d
	ANDL $0x1f, R8               // <--                                  // and	r8d, 31
	MOVQ R8, 0x38(SP)            // <--                                  // mov	qword ptr [rsp + 56], r8
	WORD $0x294d; BYTE $0xc1     // SUBQ R8, R9                          // sub	r9, r8
	WORD $0x014d; BYTE $0xe1     // ADDQ R12, R9                         // add	r9, r12
	MOVQ R9, 0x40(SP)            // <--                                  // mov	qword ptr [rsp + 64], r9
	XORL R8, R8                  // <--                                  // xor	r8d, r8d
	JMP  LBB5_6                  // <--                                  // jmp	.LBB5_6

LBB5_15:
	INCQ R8                  // <--                                  // inc	r8
	WORD $0x3949; BYTE $0xd0 // CMPQ DX, R8                          // cmp	r8, rdx
	JE   LBB5_22             // <--                                  // je	.LBB5_22

LBB5_6:
	MOVQ 0(SI)(R8*8), R9         // <--                                  // mov	r9, qword ptr [rsi + 8*r8]
	LEAQ 0(R9)(AX*1), R10        // <--                                  // lea	r10, [r9 + rax]
	WORD $0x394c; BYTE $0xd3     // CMPQ R10, BX                         // cmp	rbx, r10
	JAE  LBB5_8                  // <--                                  // jae	.LBB5_8
	MOVQ 0x50(SP), R10           // <--                                  // mov	r10, qword ptr [rsp + 80]
	WORD $0x014d; BYTE $0xca     // ADDQ R9, R10                         // add	r10, r9
	MOVQ R12, R14                // <--                                  // mov	r14, r12
	LONG $0x24543b4c; BYTE $0x48 // CMPQ 0x48(SP), R10                   // cmp	r10, qword ptr [rsp + 72]
	JB   LBB5_11                 // <--                                  // jb	.LBB5_11

LBB5_8:
	MOVQ 0x18(SP), R10     // <--                                  // mov	r10, qword ptr [rsp + 24]
	LEAQ 0(R9)(R10*1), R14 // <--                                  // lea	r14, [r9 + r10]
	XORL R10, R10          // <--                                  // xor	r10d, r10d

LBB5_9:
	QUAD $0xfdd64410487c9162                   // ?                                    // vmovups	zmm0, zmmword ptr [r14 + 8*r10 - 192]
	QUAD $0xfed64c10487c9162                   // ?                                    // vmovups	zmm1, zmmword ptr [r14 + 8*r10 - 128]
	QUAD $0xffd65410487c9162                   // ?                                    // vmovups	zmm2, zmmword ptr [r14 + 8*r10 - 64]
	LONG $0x487c9162; WORD $0x1c10; BYTE $0xd6 // ?                                    // vmovups	zmm3, zmmword ptr [r14 + 8*r10]
	QUAD $0xfdd14455487cb162                   // ?                                    // vandnps	zmm0, zmm0, zmmword ptr [rcx + 8*r10 - 192]
	QUAD $0xfed14c554874b162                   // ?                                    // vandnps	zmm1, zmm1, zmmword ptr [rcx + 8*r10 - 128]
	QUAD $0xffd15455486cb162                   // ?                                    // vandnps	zmm2, zmm2, zmmword ptr [rcx + 8*r10 - 64]
	LONG $0x4864b162; WORD $0x1c55; BYTE $0xd1 // ?                                    // vandnps	zmm3, zmm3, zmmword ptr [rcx + 8*r10]
	QUAD $0xfdd14411487cb162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*r10 - 192], zmm0
	QUAD $0xfed14c11487cb162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*r10 - 128], zmm1
	QUAD $0xffd15411487cb162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*r10 - 64], zmm2
	LONG $0x487cb162; WORD $0x1c11; BYTE $0xd1 // ?                                    // vmovups	zmmword ptr [rcx + 8*r10], zmm3
	LONG $0x20c28349                           // ADDQ $0x20, R10                      // add	r10, 32
	WORD $0x394d; BYTE $0xd5                   // CMPQ R10, R13                        // cmp	r13, r10
	JNE  LBB5_9                                // <--                                  // jne	.LBB5_9
	MOVQ 0x40(SP), R14                         // <--                                  // mov	r14, qword ptr [rsp + 64]
	LONG $0x247c8348; WORD $0x0038             // CMPQ $0x0, 0x38(SP)                  // cmp	qword ptr [rsp + 56], 0
	JE   LBB5_15                               // <--                                  // je	.LBB5_15

LBB5_11:
	MOVL R15, R11            // <--                                  // mov	r11d, r15d
	WORD $0x2945; BYTE $0xf3 // SUBL R14, R11                        // sub	r11d, r14d
	LEAQ 0x1(R14), R10       // <--                                  // lea	r10, [r14 + 1]
	LONG $0x01c3f641         // TESTL $0x1, R11                      // test	r11b, 1
	JE   LBB5_13             // <--                                  // je	.LBB5_13
	MOVQ 0(R9)(R14*8), R11   // <--                                  // mov	r11, qword ptr [r9 + 8*r14]
	NOTQ R11                 // <--                                  // not	r11
	ANDQ R11, 0(DI)(R14*8)   // <--                                  // and	qword ptr [rdi + 8*r14], r11
	MOVQ R10, R14            // <--                                  // mov	r14, r10

LBB5_13:
	WORD $0x394d; BYTE $0xd7 // CMPQ R10, R15                        // cmp	r15, r10
	JE   LBB5_15             // <--                                  // je	.LBB5_15

LBB5_14:
	MOVQ 0(R9)(R14*8), R10   // <--                                  // mov	r10, qword ptr [r9 + 8*r14]
	NOTQ R10                 // <--                                  // not	r10
	ANDQ R10, 0(DI)(R14*8)   // <--                                  // and	qword ptr [rdi + 8*r14], r10
	MOVQ 0x8(R9)(R14*8), R10 // <--                                  // mov	r10, qword ptr [r9 + 8*r14 + 8]
	NOTQ R10                 // <--                                  // not	r10
	ANDQ R10, 0x8(DI)(R14*8) // <--                                  // and	qword ptr [rdi + 8*r14 + 8], r10
	LONG $0x02c68349         // ADDQ $0x2, R14                       // add	r14, 2
	WORD $0x394d; BYTE $0xf7 // CMPQ R14, R15                        // cmp	r15, r14
	JNE  LBB5_14             // <--                                  // jne	.LBB5_14
	JMP  LBB5_15             // <--                                  // jmp	.LBB5_15

LBB5_23:
	NOP               // <--                                  // lea	rsp, [rbp - 40]
	MOVQ 120(SP), BX  // <--                                  // pop	rbx
	MOVQ 112(SP), R12 // <--                                  // pop	r12
	MOVQ 104(SP), R13 // <--                                  // pop	r13
	MOVQ 96(SP), R14  // <--                                  // pop	r14
	MOVQ 88(SP), R15  // <--                                  // pop	r15
	NOP               // <--                                  // pop	rbp
	VZEROUPPER        // <--                                  // vzeroupper
	RET               // <--                                  // ret

TEXT ·_or_many_avx512(SB), 0, $144-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ dims+16(FP), DX
	NOP                          // <--                                  // push	rbp
	NOP                          // <--                                  // mov	rbp, rsp
	MOVQ R15, 104(SP)            // <--                                  // push	r15
	MOVQ R14, 112(SP)            // <--                                  // push	r14
	MOVQ R13, 120(SP)            // <--                                  // push	r13
	MOVQ R12, 128(SP)            // <--                                  // push	r12
	MOVQ BX, 136(SP)             // <--                                  // push	rbx
	ANDQ $-0x8, SP               // <--                                  // and	rsp, -8
	NOP                          // <--                                  // sub	rsp, 104
	MOVQ SI, 0x28(SP)            // <--                                  // mov	qword ptr [rsp + 40], rsi
	MOVL $-0x1, AX               // <--                                  // mov	eax, 4294967295
	MOVQ DX, 0x8(SP)             // <--                                  // mov	qword ptr [rsp + 8], rdx
	ANDQ DX, AX                  // <--                                  // and	rax, rdx
	JE   LBB6_26                 // <--                                  // je	.LBB6_26
	SHRQ $0x20, 0x8(SP)          // <--                                  // shr	qword ptr [rsp + 8], 32
	JE   LBB6_26                 // <--                                  // je	.LBB6_26
	LEAQ 0xc0(DI), CX            // <--                                  // lea	rcx, [rdi + 192]
	LONG $0x000200ba; BYTE $0x00 // MOVL $_andn+224(SB), DX              // mov	edx, 512
	MOVL $0xc0, SI               // <--                                  // mov	esi, 192
	MOVQ SI, 0x18(SP)            // <--                                  // mov	qword ptr [rsp + 24], rsi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	MOVQ SI, 0x20(SP)            // <--                                  // mov	qword ptr [rsp + 32], rsi
	MOVQ DI, R11                 // <--                                  // mov	r11, rdi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	MOVQ SI, 0(SP)               // <--                                  // mov	qword ptr [rsp], rsi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	XORL R8, R8                  // <--                                  // xor	r8d, r8d
	MOVQ AX, 0x30(SP)            // <--                                  // mov	qword ptr [rsp + 48], rax
	JMP  LBB6_3                  // <--                                  // jmp	.LBB6_3

LBB6_25:
	MOVQ 0x40(SP), DX                          // <--                                  // mov	rdx, qword ptr [rsp + 64]
	LONG $0x00c28148; WORD $0x0002; BYTE $0x00 // ADDQ $_andn+224(SB), DX              // add	rdx, 512
	MOVQ 0x10(SP), SI                          // <--                                  // mov	rsi, qword ptr [rsp + 16]
	INCQ SI                                    // <--                                  // inc	rsi
	QUAD $0xfffffe0024048148                   // ADDQ $-0x200, 0(SP)                  // add	qword ptr [rsp], -512
	QUAD $0x0010001824448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x18(SP)    // add	qword ptr [rsp + 24], 4096
	LONG $0x00c18148; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), CX          // add	rcx, 4096
	LONG $0x00c38149; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), R11         // add	r11, 4096
	QUAD $0x0010002024448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x20(SP)    // add	qword ptr [rsp + 32], 4096
	MOVQ 0x30(SP), AX                          // <--                                  // mov	rax, qword ptr [rsp + 48]
	MOVQ 0x38(SP), R8                          // <--                                  // mov	r8, qword ptr [rsp + 56]
	WORD $0x3949; BYTE $0xc0                   // CMPQ AX, R8                          // cmp	r8, rax
	JAE  LBB6_26                               // <--                                  // jae	.LBB6_26

LBB6_3:
	MOVQ SI, 0x10(SP)        // <--                                  // mov	qword ptr [rsp + 16], rsi
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	MOVQ AX, R13             // <--                                  // mov	r13, rax
	MOVQ DX, 0x40(SP)        // <--                                  // mov	qword ptr [rsp + 64], rdx
	LONG $0xea420f4c         // CMOVB DX, R13                        // cmovb	r13, rdx
	LEAQ 0x200(R8), DX       // <--                                  // lea	rdx, [r8 + 512]
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	MOVQ DX, 0x38(SP)        // <--                                  // mov	qword ptr [rsp + 56], rdx
	LONG $0xc2420f48         // CMOVB DX, AX                         // cmovb	rax, rdx
	WORD $0x3949; BYTE $0xc0 // CMPQ AX, R8                          // cmp	r8, rax
	JAE  LBB6_25             // <--                                  // jae	.LBB6_25
	MOVQ 0x10(SP), DX        // <--                                  // mov	rdx, qword ptr [rsp + 16]
	MOVQ DX, AX              // <--                                  // mov	rax, rdx
	SHLQ $0x9, AX            // <--                                  // shl	rax, 9
	MOVQ R13, SI             // <--                                  // mov	rsi, r13
	WORD $0x2948; BYTE $0xc6 // SUBQ AX, SI                          // sub	rsi, rax
	NOTQ AX                  // <--                                  // not	rax
	WORD $0x014c; BYTE $0xe8 // ADDQ R13, AX                         // add	rax, r13
	LONG $0x20fe8348         // CMPQ $0x20, SI                       // cmp	rsi, 32
	JAE  LBB6_5              // <--                                  // jae	.LBB6_5
	MOVL R13, R9             // <--                                  // mov	r9d, r13d
	ANDL $0x3, R9            // <--                                  // and	r9d, 3
	MOVQ 0(SP), R10          // <--                                  // mov	r10, qword ptr [rsp]
	NEGQ R10                 // <--                                  // neg	r10
	XORL BX, BX              // <--                                  // xor	ebx, ebx
	JMP  LBB6_18             // <--                                  // jmp	.LBB6_18

LBB6_24:
	INCQ BX                      // <--                                  // inc	rbx
	LONG $0x245c3b48; BYTE $0x08 // CMPQ 0x8(SP), BX                     // cmp	rbx, qword ptr [rsp + 8]
	JE   LBB6_25                 // <--                                  // je	.LBB6_25

LBB6_18:
	MOVQ 0x28(SP), DX     // <--                                  // mov	rdx, qword ptr [rsp + 40]
	MOVQ 0(DX)(BX*8), R14 // <--                                  // mov	r14, qword ptr [rdx + 8*rbx]
	MOVQ R8, R15          // <--                                  // mov	r15, r8
	LONG $0x03c5f641      // TESTL $0x3, R13                      // test	r13b, 3
	JE   LBB6_22          // <--                                  // je	.LBB6_22
	MOVQ 0x20(SP), DX     // <--                                  // mov	rdx, qword ptr [rsp + 32]
	LEAQ 0(R14)(DX*1), SI // <--                                  // lea	rsi, [r14 + rdx]
	XORL R15, R15         // <--                                  // xor	r15d, r15d

LBB6_20:
	MOVQ 0(SI)(R15*8), R12   // <--                                  // mov	r12, qword ptr [rsi + 8*r15]
	ORQ  R12, 0(R11)(R15*8)  // <--                                  // or	qword ptr [r11 + 8*r15], r12
	INCQ R15                 // <--                                  // inc	r15
	WORD $0x394d; BYTE $0xf9 // CMPQ R15, R9                         // cmp	r9, r15
	JNE  LBB6_20             // <--                                  // jne	.LBB6_20
	WORD $0x014d; BYTE $0xd7 // ADDQ R10, R15                        // add	r15, r10

LBB6_22:
	LONG $0x03f88348 // CMPQ $0x3, AX                        // cmp	rax, 3
	JB   LBB6_24     // <--                                  // jb	.LBB6_24

LBB6_23:
	MOVQ 0(R14)(R15*8), SI    // <--                                  // mov	rsi, qword ptr [r14 + 8*r15]
	ORQ  SI, 0(DI)(R15*8)     // <--                                  // or	qword ptr [rdi + 8*r15], rsi
	MOVQ 0x8(R14)(R15*8), SI  // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 8]
	ORQ  SI, 0x8(DI)(R15*8)   // <--                                  // or	qword ptr [rdi + 8*r15 + 8], rsi
	MOVQ 0x10(R14)(R15*8), SI // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 16]
	ORQ  SI, 0x10(DI)(R15*8)  // <--                                  // or	qword ptr [rdi + 8*r15 + 16], rsi
	MOVQ 0x18(R14)(R15*8), SI // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 24]
	ORQ  SI, 0x18(DI)(R15*8)  // <--                                  // or	qword ptr [rdi + 8*r15 + 24], rsi
	LONG $0x04c78349          // ADDQ $0x4, R15                       // add	r15, 4
	WORD $0x394d; BYTE $0xfd  // CMPQ R15, R13                        // cmp	r13, r15
	JNE  LBB6_23              // <--                                  // jne	.LBB6_23
	JMP  LBB6_24              // <--                                  // jmp	.LBB6_24

LBB6_5:
	MOVL R13, R15            // <--                                  // mov	r15d, r13d
	ANDL $-0x20, R15         // <--                                  // and	r15d, -32
	LONG $0x243c034c         // ADDQ 0(SP), R15                      // add	r15, qword ptr [rsp]
	MOVQ DX, R10             // <--                                  // mov	r10, rdx
	SHLQ $0xc, R10           // <--                                  // shl	r10, 12
	LEAQ 0(DI)(R10*1), DX    // <--                                  // lea	rdx, [rdi + r10]
	LEAQ 0(R10)(AX*8), R9    // <--                                  // lea	r9, [r10 + 8*rax]
	WORD $0x0149; BYTE $0xf9 // ADDQ DI, R9                          // add	r9, rdi
	LONG $0x08c18349         // ADDQ $0x8, R9                        // add	r9, 8
	MOVQ R9, 0x58(SP)        // <--                                  // mov	qword ptr [rsp + 88], r9
	MOVQ R10, 0x60(SP)       // <--                                  // mov	qword ptr [rsp + 96], r10
	LEAQ 0(R10)(AX*8), R9    // <--                                  // lea	r9, [r10 + 8*rax]
	LONG $0x08c18349         // ADDQ $0x8, R9                        // add	r9, 8
	MOVL R13, AX             // <--                                  // mov	eax, r13d
	ANDL $0x1f, AX           // <--                                  // and	eax, 31
	MOVQ AX, 0x48(SP)        // <--                                  // mov	qword ptr [rsp + 72], rax
	WORD $0x2948; BYTE $0xc6 // SUBQ AX, SI                          // sub	rsi, rax
	WORD $0x014c; BYTE $0xc6 // ADDQ R8, SI                          // add	rsi, r8
	MOVQ SI, 0x50(SP)        // <--                                  // mov	qword ptr [rsp + 80], rsi
	XORL R10, R10            // <--                                  // xor	r10d, r10d
	JMP  LBB6_6              // <--                                  // jmp	.LBB6_6

LBB6_16:
	INCQ R10                     // <--                                  // inc	r10
	LONG $0x24543b4c; BYTE $0x08 // CMPQ 0x8(SP), R10                    // cmp	r10, qword ptr [rsp + 8]
	JE   LBB6_25                 // <--                                  // je	.LBB6_25

LBB6_6:
	MOVQ 0x28(SP), AX            // <--                                  // mov	rax, qword ptr [rsp + 40]
	MOVQ 0(AX)(R10*8), AX        // <--                                  // mov	rax, qword ptr [rax + 8*r10]
	LEAQ 0(AX)(R9*1), BX         // <--                                  // lea	rbx, [rax + r9]
	WORD $0x3948; BYTE $0xda     // CMPQ BX, DX                          // cmp	rdx, rbx
	JAE  LBB6_8                  // <--                                  // jae	.LBB6_8
	MOVQ 0x60(SP), SI            // <--                                  // mov	rsi, qword ptr [rsp + 96]
	LEAQ 0(AX)(SI*1), BX         // <--                                  // lea	rbx, [rax + rsi]
	MOVQ R8, R12                 // <--                                  // mov	r12, r8
	LONG $0x245c3b48; BYTE $0x58 // CMPQ 0x58(SP), BX                    // cmp	rbx, qword ptr [rsp + 88]
	JB   LBB6_11                 // <--                                  // jb	.LBB6_11

LBB6_8:
	MOVQ 0x18(SP), SI     // <--                                  // mov	rsi, qword ptr [rsp + 24]
	LEAQ 0(AX)(SI*1), R14 // <--                                  // lea	r14, [rax + rsi]
	XORL BX, BX           // <--                                  // xor	ebx, ebx

LBB6_9:
	QUAD $0xfdd94410487cf162                   // ?                                    // vmovups	zmm0, zmmword ptr [rcx + 8*rbx - 192]
	QUAD $0xfed94c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rcx + 8*rbx - 128]
	QUAD $0xffd95410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rcx + 8*rbx - 64]
	LONG $0x487cf162; WORD $0x1c10; BYTE $0xd9 // ?                                    // vmovups	zmm3, zmmword ptr [rcx + 8*rbx]
	QUAD $0xfdde4456487cd162                   // ?                                    // vorps	zmm0, zmm0, zmmword ptr [r14 + 8*rbx - 192]
	QUAD $0xfede4c564874d162                   // ?                                    // vorps	zmm1, zmm1, zmmword ptr [r14 + 8*rbx - 128]
	QUAD $0xffde5456486cd162                   // ?                                    // vorps	zmm2, zmm2, zmmword ptr [r14 + 8*rbx - 64]
	LONG $0x4864d162; WORD $0x1c56; BYTE $0xde // ?                                    // vorps	zmm3, zmm3, zmmword ptr [r14 + 8*rbx]
	QUAD $0xfdd94411487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 192], zmm0
	QUAD $0xfed94c11487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 128], zmm1
	QUAD $0xffd95411487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 64], zmm2
	LONG $0x487cf162; WORD $0x1c11; BYTE $0xd9 // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx], zmm3
	LONG $0x20c38348                           // ADDQ $0x20, BX                       // add	rbx, 32
	WORD $0x3949; BYTE $0xdf                   // CMPQ BX, R15                         // cmp	r15, rbx
	JNE  LBB6_9                                // <--                                  // jne	.LBB6_9
	MOVQ 0x50(SP), R12                         // <--                                  // mov	r12, qword ptr [rsp + 80]
	LONG $0x247c8348; WORD $0x0048             // CMPQ $0x0, 0x48(SP)                  // cmp	qword ptr [rsp + 72], 0
	JE   LBB6_16                               // <--                                  // je	.LBB6_16

LBB6_11:
	MOVL R13, BX             // <--                                  // mov	ebx, r13d
	WORD $0x2944; BYTE $0xe3 // SUBL R12, BX                         // sub	ebx, r12d
	MOVQ R12, R14            // <--                                  // mov	r14, r12
	NOTQ R14                 // <--                                  // not	r14
	WORD $0x014d; BYTE $0xee // ADDQ R13, R14                        // add	r14, r13
	WORD $0xc3f6; BYTE $0x03 // TESTL $0x3, BL                       // test	bl, 3
	JE   LBB6_14             // <--                                  // je	.LBB6_14
	MOVL R13, BX             // <--                                  // mov	ebx, r13d
	WORD $0x2844; BYTE $0xe3 // SUBL R12, BL                         // sub	bl, r12b
	WORD $0xb60f; BYTE $0xdb // MOVZX BL, BX                         // movzx	ebx, bl
	ANDL $0x3, BX            // <--                                  // and	ebx, 3

LBB6_13:
	MOVQ 0(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12]
	ORQ  SI, 0(DI)(R12*8) // <--                                  // or	qword ptr [rdi + 8*r12], rsi
	INCQ R12              // <--                                  // inc	r12
	DECQ BX               // <--                                  // dec	rbx
	JNE  LBB6_13          // <--                                  // jne	.LBB6_13

LBB6_14:
	LONG $0x03fe8349 // CMPQ $0x3, R14                       // cmp	r14, 3
	JB   LBB6_16     // <--                                  // jb	.LBB6_16

LBB6_15:
	MOVQ 0(AX)(R12*8), SI    // <--                                  // mov	rsi, qword ptr [rax + 8*r12]
	ORQ  SI, 0(DI)(R12*8)    // <--                                  // or	qword ptr [rdi + 8*r12], rsi
	MOVQ 0x8(AX)(R12*8), SI  // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 8]
	ORQ  SI, 0x8(DI)(R12*8)  // <--                                  // or	qword ptr [rdi + 8*r12 + 8], rsi
	MOVQ 0x10(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 16]
	ORQ  SI, 0x10(DI)(R12*8) // <--                                  // or	qword ptr [rdi + 8*r12 + 16], rsi
	MOVQ 0x18(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 24]
	ORQ  SI, 0x18(DI)(R12*8) // <--                                  // or	qword ptr [rdi + 8*r12 + 24], rsi
	LONG $0x04c48349         // ADDQ $0x4, R12                       // add	r12, 4
	WORD $0x394d; BYTE $0xe5 // CMPQ R12, R13                        // cmp	r13, r12
	JNE  LBB6_15             // <--                                  // jne	.LBB6_15
	JMP  LBB6_16             // <--                                  // jmp	.LBB6_16

LBB6_26:
	NOP               // <--                                  // lea	rsp, [rbp - 40]
	MOVQ 136(SP), BX  // <--                                  // pop	rbx
	MOVQ 128(SP), R12 // <--                                  // pop	r12
	MOVQ 120(SP), R13 // <--                                  // pop	r13
	MOVQ 112(SP), R14 // <--                                  // pop	r14
	MOVQ 104(SP), R15 // <--                                  // pop	r15
	NOP               // <--                                  // pop	rbp
	VZEROUPPER        // <--                                  // vzeroupper
	RET               // <--                                  // ret

TEXT ·_xor_many_avx512(SB), 0, $144-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ dims+16(FP), DX
	NOP                          // <--                                  // push	rbp
	NOP                          // <--                                  // mov	rbp, rsp
	MOVQ R15, 104(SP)            // <--                                  // push	r15
	MOVQ R14, 112(SP)            // <--                                  // push	r14
	MOVQ R13, 120(SP)            // <--                                  // push	r13
	MOVQ R12, 128(SP)            // <--                                  // push	r12
	MOVQ BX, 136(SP)             // <--                                  // push	rbx
	ANDQ $-0x8, SP               // <--                                  // and	rsp, -8
	NOP                          // <--                                  // sub	rsp, 104
	MOVQ SI, 0x28(SP)            // <--                                  // mov	qword ptr [rsp + 40], rsi
	MOVL $-0x1, AX               // <--                                  // mov	eax, 4294967295
	MOVQ DX, 0x8(SP)             // <--                                  // mov	qword ptr [rsp + 8], rdx
	ANDQ DX, AX                  // <--                                  // and	rax, rdx
	JE   LBB7_26                 // <--                                  // je	.LBB7_26
	SHRQ $0x20, 0x8(SP)          // <--                                  // shr	qword ptr [rsp + 8], 32
	JE   LBB7_26                 // <--                                  // je	.LBB7_26
	LEAQ 0xc0(DI), CX            // <--                                  // lea	rcx, [rdi + 192]
	LONG $0x000200ba; BYTE $0x00 // MOVL $_andn+224(SB), DX              // mov	edx, 512
	MOVL $0xc0, SI               // <--                                  // mov	esi, 192
	MOVQ SI, 0x18(SP)            // <--                                  // mov	qword ptr [rsp + 24], rsi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	MOVQ SI, 0x20(SP)            // <--                                  // mov	qword ptr [rsp + 32], rsi
	MOVQ DI, R11                 // <--                                  // mov	r11, rdi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	MOVQ SI, 0(SP)               // <--                                  // mov	qword ptr [rsp], rsi
	XORL SI, SI                  // <--                                  // xor	esi, esi
	XORL R8, R8                  // <--                                  // xor	r8d, r8d
	MOVQ AX, 0x30(SP)            // <--                                  // mov	qword ptr [rsp + 48], rax
	JMP  LBB7_3                  // <--                                  // jmp	.LBB7_3

LBB7_25:
	MOVQ 0x40(SP), DX                          // <--                                  // mov	rdx, qword ptr [rsp + 64]
	LONG $0x00c28148; WORD $0x0002; BYTE $0x00 // ADDQ $_andn+224(SB), DX              // add	rdx, 512
	MOVQ 0x10(SP), SI                          // <--                                  // mov	rsi, qword ptr [rsp + 16]
	INCQ SI                                    // <--                                  // inc	rsi
	QUAD $0xfffffe0024048148                   // ADDQ $-0x200, 0(SP)                  // add	qword ptr [rsp], -512
	QUAD $0x0010001824448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x18(SP)    // add	qword ptr [rsp + 24], 4096
	LONG $0x00c18148; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), CX          // add	rcx, 4096
	LONG $0x00c38149; WORD $0x0010; BYTE $0x00 // ADDQ $_xor_many+512(SB), R11         // add	r11, 4096
	QUAD $0x0010002024448148; BYTE $0x00       // ADDQ $_xor_many+512(SB), 0x20(SP)    // add	qword ptr [rsp + 32], 4096
	MOVQ 0x30(SP), AX                          // <--                                  // mov	rax, qword ptr [rsp + 48]
	MOVQ 0x38(SP), R8                          // <--                                  // mov	r8, qword ptr [rsp + 56]
	WORD $0x3949; BYTE $0xc0                   // CMPQ AX, R8                          // cmp	r8, rax
	JAE  LBB7_26                               // <--                                  // jae	.LBB7_26

LBB7_3:
	MOVQ SI, 0x10(SP)        // <--                                  // mov	qword ptr [rsp + 16], rsi
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	MOVQ AX, R13             // <--                                  // mov	r13, rax
	MOVQ DX, 0x40(SP)        // <--                                  // mov	qword ptr [rsp + 64], rdx
	LONG $0xea420f4c         // CMOVB DX, R13                        // cmovb	r13, rdx
	LEAQ 0x200(R8), DX       // <--                                  // lea	rdx, [r8 + 512]
	WORD $0x3948; BYTE $0xc2 // CMPQ AX, DX                          // cmp	rdx, rax
	MOVQ DX, 0x38(SP)        // <--                                  // mov	qword ptr [rsp + 56], rdx
	LONG $0xc2420f48         // CMOVB DX, AX                         // cmovb	rax, rdx
	WORD $0x3949; BYTE $0xc0 // CMPQ AX, R8                          // cmp	r8, rax
	JAE  LBB7_25             // <--                                  // jae	.LBB7_25
	MOVQ 0x10(SP), DX        // <--                                  // mov	rdx, qword ptr [rsp + 16]
	MOVQ DX, AX              // <--                                  // mov	rax, rdx
	SHLQ $0x9, AX            // <--                                  // shl	rax, 9
	MOVQ R13, SI             // <--                                  // mov	rsi, r13
	WORD $0x2948; BYTE $0xc6 // SUBQ AX, SI                          // sub	rsi, rax
	NOTQ AX                  // <--                                  // not	rax
	WORD $0x014c; BYTE $0xe8 // ADDQ R13, AX                         // add	rax, r13
	LONG $0x20fe8348         // CMPQ $0x20, SI                       // cmp	rsi, 32
	JAE  LBB7_5              // <--                                  // jae	.LBB7_5
	MOVL R13, R9             // <--                                  // mov	r9d, r13d
	ANDL $0x3, R9            // <--                                  // and	r9d, 3
	MOVQ 0(SP), R10          // <--                                  // mov	r10, qword ptr [rsp]
	NEGQ R10                 // <--                                  // neg	r10
	XORL BX, BX              // <--                                  // xor	ebx, ebx
	JMP  LBB7_18             // <--                                  // jmp	.LBB7_18

LBB7_24:
	INCQ BX                      // <--                                  // inc	rbx
	LONG $0x245c3b48; BYTE $0x08 // CMPQ 0x8(SP), BX                     // cmp	rbx, qword ptr [rsp + 8]
	JE   LBB7_25                 // <--                                  // je	.LBB7_25

LBB7_18:
	MOVQ 0x28(SP), DX     // <--                                  // mov	rdx, qword ptr [rsp + 40]
	MOVQ 0(DX)(BX*8), R14 // <--                                  // mov	r14, qword ptr [rdx + 8*rbx]
	MOVQ R8, R15          // <--                                  // mov	r15, r8
	LONG $0x03c5f641      // TESTL $0x3, R13                      // test	r13b, 3
	JE   LBB7_22          // <--                                  // je	.LBB7_22
	MOVQ 0x20(SP), DX     // <--                                  // mov	rdx, qword ptr [rsp + 32]
	LEAQ 0(R14)(DX*1), SI // <--                                  // lea	rsi, [r14 + rdx]
	XORL R15, R15         // <--                                  // xor	r15d, r15d

LBB7_20:
	MOVQ 0(SI)(R15*8), R12   // <--                                  // mov	r12, qword ptr [rsi + 8*r15]
	XORQ R12, 0(R11)(R15*8)  // <--                                  // xor	qword ptr [r11 + 8*r15], r12
	INCQ R15                 // <--                                  // inc	r15
	WORD $0x394d; BYTE $0xf9 // CMPQ R15, R9                         // cmp	r9, r15
	JNE  LBB7_20             // <--                                  // jne	.LBB7_20
	WORD $0x014d; BYTE $0xd7 // ADDQ R10, R15                        // add	r15, r10

LBB7_22:
	LONG $0x03f88348 // CMPQ $0x3, AX                        // cmp	rax, 3
	JB   LBB7_24     // <--                                  // jb	.LBB7_24

LBB7_23:
	MOVQ 0(R14)(R15*8), SI    // <--                                  // mov	rsi, qword ptr [r14 + 8*r15]
	XORQ SI, 0(DI)(R15*8)     // <--                                  // xor	qword ptr [rdi + 8*r15], rsi
	MOVQ 0x8(R14)(R15*8), SI  // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 8]
	XORQ SI, 0x8(DI)(R15*8)   // <--                                  // xor	qword ptr [rdi + 8*r15 + 8], rsi
	MOVQ 0x10(R14)(R15*8), SI // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 16]
	XORQ SI, 0x10(DI)(R15*8)  // <--                                  // xor	qword ptr [rdi + 8*r15 + 16], rsi
	MOVQ 0x18(R14)(R15*8), SI // <--                                  // mov	rsi, qword ptr [r14 + 8*r15 + 24]
	XORQ SI, 0x18(DI)(R15*8)  // <--                                  // xor	qword ptr [rdi + 8*r15 + 24], rsi
	LONG $0x04c78349          // ADDQ $0x4, R15                       // add	r15, 4
	WORD $0x394d; BYTE $0xfd  // CMPQ R15, R13                        // cmp	r13, r15
	JNE  LBB7_23              // <--                                  // jne	.LBB7_23
	JMP  LBB7_24              // <--                                  // jmp	.LBB7_24

LBB7_5:
	MOVL R13, R15            // <--                                  // mov	r15d, r13d
	ANDL $-0x20, R15         // <--                                  // and	r15d, -32
	LONG $0x243c034c         // ADDQ 0(SP), R15                      // add	r15, qword ptr [rsp]
	MOVQ DX, R10             // <--                                  // mov	r10, rdx
	SHLQ $0xc, R10           // <--                                  // shl	r10, 12
	LEAQ 0(DI)(R10*1), DX    // <--                                  // lea	rdx, [rdi + r10]
	LEAQ 0(R10)(AX*8), R9    // <--                                  // lea	r9, [r10 + 8*rax]
	WORD $0x0149; BYTE $0xf9 // ADDQ DI, R9                          // add	r9, rdi
	LONG $0x08c18349         // ADDQ $0x8, R9                        // add	r9, 8
	MOVQ R9, 0x58(SP)        // <--                                  // mov	qword ptr [rsp + 88], r9
	MOVQ R10, 0x60(SP)       // <--                                  // mov	qword ptr [rsp + 96], r10
	LEAQ 0(R10)(AX*8), R9    // <--                                  // lea	r9, [r10 + 8*rax]
	LONG $0x08c18349         // ADDQ $0x8, R9                        // add	r9, 8
	MOVL R13, AX             // <--                                  // mov	eax, r13d
	ANDL $0x1f, AX           // <--                                  // and	eax, 31
	MOVQ AX, 0x48(SP)        // <--                                  // mov	qword ptr [rsp + 72], rax
	WORD $0x2948; BYTE $0xc6 // SUBQ AX, SI                          // sub	rsi, rax
	WORD $0x014c; BYTE $0xc6 // ADDQ R8, SI                          // add	rsi, r8
	MOVQ SI, 0x50(SP)        // <--                                  // mov	qword ptr [rsp + 80], rsi
	XORL R10, R10            // <--                                  // xor	r10d, r10d
	JMP  LBB7_6              // <--                                  // jmp	.LBB7_6

LBB7_16:
	INCQ R10                     // <--                                  // inc	r10
	LONG $0x24543b4c; BYTE $0x08 // CMPQ 0x8(SP), R10                    // cmp	r10, qword ptr [rsp + 8]
	JE   LBB7_25                 // <--                                  // je	.LBB7_25

LBB7_6:
	MOVQ 0x28(SP), AX            // <--                                  // mov	rax, qword ptr [rsp + 40]
	MOVQ 0(AX)(R10*8), AX        // <--                                  // mov	rax, qword ptr [rax + 8*r10]
	LEAQ 0(AX)(R9*1), BX         // <--                                  // lea	rbx, [rax + r9]
	WORD $0x3948; BYTE $0xda     // CMPQ BX, DX                          // cmp	rdx, rbx
	JAE  LBB7_8                  // <--                                  // jae	.LBB7_8
	MOVQ 0x60(SP), SI            // <--                                  // mov	rsi, qword ptr [rsp + 96]
	LEAQ 0(AX)(SI*1), BX         // <--                                  // lea	rbx, [rax + rsi]
	MOVQ R8, R12                 // <--                                  // mov	r12, r8
	LONG $0x245c3b48; BYTE $0x58 // CMPQ 0x58(SP), BX                    // cmp	rbx, qword ptr [rsp + 88]
	JB   LBB7_11                 // <--                                  // jb	.LBB7_11

LBB7_8:
	MOVQ 0x18(SP), SI     // <--                                  // mov	rsi, qword ptr [rsp + 24]
	LEAQ 0(AX)(SI*1), R14 // <--                                  // lea	r14, [rax + rsi]
	XORL BX, BX           // <--                                  // xor	ebx, ebx

LBB7_9:
	QUAD $0xfdd94410487cf162                   // ?                                    // vmovups	zmm0, zmmword ptr [rcx + 8*rbx - 192]
	QUAD $0xfed94c10487cf162                   // ?                                    // vmovups	zmm1, zmmword ptr [rcx + 8*rbx - 128]
	QUAD $0xffd95410487cf162                   // ?                                    // vmovups	zmm2, zmmword ptr [rcx + 8*rbx - 64]
	LONG $0x487cf162; WORD $0x1c10; BYTE $0xd9 // ?                                    // vmovups	zmm3, zmmword ptr [rcx + 8*rbx]
	QUAD $0xfdde4457487cd162                   // ?                                    // vxorps	zmm0, zmm0, zmmword ptr [r14 + 8*rbx - 192]
	QUAD $0xfede4c574874d162                   // ?                                    // vxorps	zmm1, zmm1, zmmword ptr [r14 + 8*rbx - 128]
	QUAD $0xffde5457486cd162                   // ?                                    // vxorps	zmm2, zmm2, zmmword ptr [r14 + 8*rbx - 64]
	LONG $0x4864d162; WORD $0x1c57; BYTE $0xde // ?                                    // vxorps	zmm3, zmm3, zmmword ptr [r14 + 8*rbx]
	QUAD $0xfdd94411487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 192], zmm0
	QUAD $0xfed94c11487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 128], zmm1
	QUAD $0xffd95411487cf162                   // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx - 64], zmm2
	LONG $0x487cf162; WORD $0x1c11; BYTE $0xd9 // ?                                    // vmovups	zmmword ptr [rcx + 8*rbx], zmm3
	LONG $0x20c38348                           // ADDQ $0x20, BX                       // add	rbx, 32
	WORD $0x3949; BYTE $0xdf                   // CMPQ BX, R15                         // cmp	r15, rbx
	JNE  LBB7_9                                // <--                                  // jne	.LBB7_9
	MOVQ 0x50(SP), R12                         // <--                                  // mov	r12, qword ptr [rsp + 80]
	LONG $0x247c8348; WORD $0x0048             // CMPQ $0x0, 0x48(SP)                  // cmp	qword ptr [rsp + 72], 0
	JE   LBB7_16                               // <--                                  // je	.LBB7_16

LBB7_11:
	MOVL R13, BX             // <--                                  // mov	ebx, r13d
	WORD $0x2944; BYTE $0xe3 // SUBL R12, BX                         // sub	ebx, r12d
	MOVQ R12, R14            // <--                                  // mov	r14, r12
	NOTQ R14                 // <--                                  // not	r14
	WORD $0x014d; BYTE $0xee // ADDQ R13, R14                        // add	r14, r13
	WORD $0xc3f6; BYTE $0x03 // TESTL $0x3, BL                       // test	bl, 3
	JE   LBB7_14             // <--                                  // je	.LBB7_14
	MOVL R13, BX             // <--                                  // mov	ebx, r13d
	WORD $0x2844; BYTE $0xe3 // SUBL R12, BL                         // sub	bl, r12b
	WORD $0xb60f; BYTE $0xdb // MOVZX BL, BX                         // movzx	ebx, bl
	ANDL $0x3, BX            // <--                                  // and	ebx, 3

LBB7_13:
	MOVQ 0(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12]
	XORQ SI, 0(DI)(R12*8) // <--                                  // xor	qword ptr [rdi + 8*r12], rsi
	INCQ R12              // <--                                  // inc	r12
	DECQ BX               // <--                                  // dec	rbx
	JNE  LBB7_13          // <--                                  // jne	.LBB7_13

LBB7_14:
	LONG $0x03fe8349 // CMPQ $0x3, R14                       // cmp	r14, 3
	JB   LBB7_16     // <--                                  // jb	.LBB7_16

LBB7_15:
	MOVQ 0(AX)(R12*8), SI    // <--                                  // mov	rsi, qword ptr [rax + 8*r12]
	XORQ SI, 0(DI)(R12*8)    // <--                                  // xor	qword ptr [rdi + 8*r12], rsi
	MOVQ 0x8(AX)(R12*8), SI  // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 8]
	XORQ SI, 0x8(DI)(R12*8)  // <--                                  // xor	qword ptr [rdi + 8*r12 + 8], rsi
	MOVQ 0x10(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 16]
	XORQ SI, 0x10(DI)(R12*8) // <--                                  // xor	qword ptr [rdi + 8*r12 + 16], rsi
	MOVQ 0x18(AX)(R12*8), SI // <--                                  // mov	rsi, qword ptr [rax + 8*r12 + 24]
	XORQ SI, 0x18(DI)(R12*8) // <--                                  // xor	qword ptr [rdi + 8*r12 + 24], rsi
	LONG $0x04c48349         // ADDQ $0x4, R12                       // add	r12, 4
	WORD $0x394d; BYTE $0xe5 // CMPQ R12, R13                        // cmp	r13, r12
	JNE  LBB7_15             // <--                                  // jne	.LBB7_15
	JMP  LBB7_16             // <--                                  // jmp	.LBB7_16

LBB7_26:
	NOP               // <--                                  // lea	rsp, [rbp - 40]
	MOVQ 136(SP), BX  // <--                                  // pop	rbx
	MOVQ 128(SP), R12 // <--                                  // pop	r12
	MOVQ 120(SP), R13 // <--                                  // pop	r13
	MOVQ 112(SP), R14 // <--                                  // pop	r14
	MOVQ 104(SP), R15 // <--                                  // pop	r15
	NOP               // <--                                  // pop	rbp
	VZEROUPPER        // <--                                  // vzeroupper
	RET               // <--                                  // ret

LCPI8_0:
LCPI8_1:

DATA LCPI8_1<>+0x00(SB)/1, $0x00
DATA LCPI8_1<>+0x01(SB)/1, $0x01
DATA LCPI8_1<>+0x02(SB)/1, $0x01
DATA LCPI8_1<>+0x03(SB)/1, $0x02
DATA LCPI8_1<>+0x04(SB)/1, $0x01
DATA LCPI8_1<>+0x05(SB)/1, $0x02
DATA LCPI8_1<>+0x06(SB)/1, $0x02
DATA LCPI8_1<>+0x07(SB)/1, $0x03
DATA LCPI8_1<>+0x08(SB)/1, $0x01
DATA LCPI8_1<>+0x09(SB)/1, $0x02
DATA LCPI8_1<>+0x0a(SB)/1, $0x02
DATA LCPI8_1<>+0x0b(SB)/1, $0x03
DATA LCPI8_1<>+0x0c(SB)/1, $0x02
DATA LCPI8_1<>+0x0d(SB)/1, $0x03
DATA LCPI8_1<>+0x0e(SB)/1, $0x03
DATA LCPI8_1<>+0x0f(SB)/1, $0x04
DATA LCPI8_1<>+0x10(SB)/1, $0x00
DATA LCPI8_1<>+0x11(SB)/1, $0x01
DATA LCPI8_1<>+0x12(SB)/1, $0x01
DATA LCPI8_1<>+0x13(SB)/1, $0x02
DATA LCPI8_1<>+0x14(SB)/1, $0x01
DATA LCPI8_1<>+0x15(SB)/1, $0x02
DATA LCPI8_1<>+0x16(SB)/1, $0x02
DATA LCPI8_1<>+0x17(SB)/1, $0x03
DATA LCPI8_1<>+0x18(SB)/1, $0x01
DATA LCPI8_1<>+0x19(SB)/1, $0x02
DATA LCPI8_1<>+0x1a(SB)/1, $0x02
DATA LCPI8_1<>+0x1b(SB)/1, $0x03
DATA LCPI8_1<>+0x1c(SB)/1, $0x02
DATA LCPI8_1<>+0x1d(SB)/1, $0x03
DATA LCPI8_1<>+0x1e(SB)/1, $0x03
DATA LCPI8_1<>+0x1f(SB)/1, $0x04
GLOBL LCPI8_1<>(SB), (RODATA|NOPTR), $32

TEXT ·_count_avx512(SB), NOSPLIT, $0-32
	MOVQ a+0(FP), DI
	MOVQ a_len+8(FP), SI
	MOVQ a_cap+16(FP), DX
	NOP                      // <--                                  // push	rbp
	NOP                      // <--                                  // mov	rbp, rsp
	NOP                      // <--                                  // and	rsp, -8
	WORD $0x8548; BYTE $0xf6 // TESTQ SI, SI                         // test	rsi, rsi
	JE   LBB8_1              // <--                                  // je	.LBB8_1
	LONG $0x10fe8348         // CMPQ $0x10, SI                       // cmp	rsi, 16
	JAE  LBB8_4              // <--                                  // jae	.LBB8_4
	XORL CX, CX              // <--                                  // xor	ecx, ecx
	XORL AX, AX              // <--                                  // xor	eax, eax
	JMP  LBB8_7              // <--                                  // jmp	.LBB8_7

LBB8_1:
	XORL AX, AX // <--                                  // xor	eax, eax
	JMP  LBB8_8 // <--                                  // jmp	.LBB8_8

LBB8_4:
	MOVQ    SI, CX            // <--                                  // mov	rcx, rsi
	ANDQ    $-0x10, CX        // <--                                  // and	rcx, -16
	LONG    $0xc0eff9c5       // ?                                    // vpxor	xmm0, xmm0, xmm0
	XORL    AX, AX            // <--                                  // xor	eax, eax
	VMOVDQA LCPI8_0<>(SB), Y1 // <--                                  // vmovdqa	ymm1, ymmword ptr [rip + .LCPI8_0]
	VMOVDQA LCPI8_1<>(SB), Y2 // <--                                  // vmovdqa	ymm2, ymmword ptr [rip + .LCPI8_1]
	LONG    $0xdbefe1c5       // ?                                    // vpxor	xmm3, xmm3, xmm3
	LONG    $0xe4efd9c5       // ?                                    // vpxor	xmm4, xmm4, xmm4
	LONG    $0xedefd1c5       // ?                                    // vpxor	xmm5, xmm5, xmm5
	LONG    $0xf6efc9c5       // ?                                    // vpxor	xmm6, xmm6, xmm6

LBB8_5:
	LONG $0x3c6ffec5; BYTE $0xc7   // VMOVDQU 0(DI)(AX*8), X7              // vmovdqu	ymm7, ymmword ptr [rdi + 8*rax]
	LONG $0x446f7ec5; WORD $0x20c7 // VMOVDQU 0x20(DI)(AX*8), X8           // vmovdqu	ymm8, ymmword ptr [rdi + 8*rax + 32]
	LONG $0x4c6f7ec5; WORD $0x40c7 // VMOVDQU 0x40(DI)(AX*8), X9           // vmovdqu	ymm9, ymmword ptr [rdi + 8*rax + 64]
	LONG $0x546f7ec5; WORD $0x60c7 // VMOVDQU 0x60(DI)(AX*8), X10          // vmovdqu	ymm10, ymmword ptr [rdi + 8*rax + 96]
	LONG $0xd9db45c5               // FCMOVNU F1, F0                       // vpand	ymm11, ymm7, ymm1
	LONG $0x006d42c4; BYTE $0xdb   // ADDL BL, BL                          // vpshufb	ymm11, ymm2, ymm11
	LONG $0xd771c5c5; BYTE $0x04   // ?                                    // vpsrlw	ymm7, ymm7, 4
	LONG $0xf9dbc5c5               // ?                                    // vpand	ymm7, ymm7, ymm1
	LONG $0x006de2c4; BYTE $0xff   // ADDL BH, BH                          // vpshufb	ymm7, ymm2, ymm7
	LONG $0xfffca5c5               // ?                                    // vpaddb	ymm7, ymm11, ymm7
	LONG $0xf8f6c5c5               // IDIVL AL                             // vpsadbw	ymm7, ymm7, ymm0
	LONG $0xdbd4c5c5               // ?                                    // vpaddq	ymm3, ymm7, ymm3
	LONG $0xf9dbbdc5               // ?                                    // vpand	ymm7, ymm8, ymm1
	LONG $0x006de2c4; BYTE $0xff   // ADDL BH, BH                          // vpshufb	ymm7, ymm2, ymm7
	LONG $0x713dc1c4; WORD $0x04d0 // ?                                    // vpsrlw	ymm8, ymm8, 4
	LONG $0xc1db3dc5               // FCMOVNB F1, F0                       // vpand	ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // ADDL AL, AL                          // vpshufb	ymm8, ymm2, ymm8
	LONG $0xfffcbdc5               // ?                                    // vpaddb	ymm7, ymm8, ymm7
	LONG $0xf8f6c5c5               // IDIVL AL                             // vpsadbw	ymm7, ymm7, ymm0
	LONG $0xe4d4c5c5               // ?                                    // vpaddq	ymm4, ymm7, ymm4
	LONG $0xf9dbb5c5               // ?                                    // vpand	ymm7, ymm9, ymm1
	LONG $0x006de2c4; BYTE $0xff   // ADDL BH, BH                          // vpshufb	ymm7, ymm2, ymm7
	LONG $0x713dc1c4; WORD $0x04d1 // ?                                    // vpsrlw	ymm8, ymm9, 4
	LONG $0xc1db3dc5               // FCMOVNB F1, F0                       // vpand	ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // ADDL AL, AL                          // vpshufb	ymm8, ymm2, ymm8
	LONG $0xfffcbdc5               // ?                                    // vpaddb	ymm7, ymm8, ymm7
	LONG $0xf8f6c5c5               // IDIVL AL                             // vpsadbw	ymm7, ymm7, ymm0
	LONG $0xedd4c5c5               // ?                                    // vpaddq	ymm5, ymm7, ymm5
	LONG $0xf9dbadc5               // ?                                    // vpand	ymm7, ymm10, ymm1
	LONG $0x006de2c4; BYTE $0xff   // ADDL BH, BH                          // vpshufb	ymm7, ymm2, ymm7
	LONG $0x713dc1c4; WORD $0x04d2 // ?                                    // vpsrlw	ymm8, ymm10, 4
	LONG $0xc1db3dc5               // FCMOVNB F1, F0                       // vpand	ymm8, ymm8, ymm1
	LONG $0x006d42c4; BYTE $0xc0   // ADDL AL, AL                          // vpshufb	ymm8, ymm2, ymm8
	LONG $0xfffcbdc5               // ?                                    // vpaddb	ymm7, ymm8, ymm7
	LONG $0xf8f6c5c5               // IDIVL AL                             // vpsadbw	ymm7, ymm7, ymm0
	LONG $0xf6d4c5c5               // ?                                    // vpaddq	ymm6, ymm7, ymm6
	LONG $0x10c08348               // ADDQ $0x10, AX                       // add	rax, 16
	WORD $0x3948; BYTE $0xc1       // CMPQ AX, CX                          // cmp	rcx, rax
	JNE  LBB8_5                    // <--                                  // jne	.LBB8_5
	LONG $0xc3d4ddc5               // ?                                    // vpaddq	ymm0, ymm4, ymm3
	LONG $0xc0d4d5c5               // ?                                    // vpaddq	ymm0, ymm5, ymm0
	LONG $0xc0d4cdc5               // ?                                    // vpaddq	ymm0, ymm6, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // ?                                    // vextracti128	xmm1, ymm0, 1
	LONG $0xc1d4f9c5               // ?                                    // vpaddq	xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xee   // ?                                    // vpshufd	xmm1, xmm0, 238
	LONG $0xc1d4f9c5               // ?                                    // vpaddq	xmm0, xmm0, xmm1
	LONG $0x7ef9e1c4; BYTE $0xc0   // JLE 0x1247                           // vmovq	rax, xmm0
	WORD $0x3948; BYTE $0xf1       // CMPQ SI, CX                          // cmp	rcx, rsi
	JE   LBB8_8                    // <--                                  // je	.LBB8_8

LBB8_7:
	POPCNTQ 0(DI)(CX*8), DX     // <--                                  // popcnt	rdx, qword ptr [rdi + 8*rcx]
	WORD    $0x0148; BYTE $0xd0 // ADDQ DX, AX                          // add	rax, rdx
	INCQ    CX                  // <--                                  // inc	rcx
	WORD    $0x3948; BYTE $0xce // CMPQ CX, SI                          // cmp	rsi, rcx
	JNE     LBB8_7              // <--                                  // jne	.LBB8_7

LBB8_8:
	NOP                 // <--                                  // mov	rsp, rbp
	NOP                 // <--                                  // pop	rbp
	VZEROUPPER          // <--                                  // vzeroupper
	MOVQ AX, ret+24(FP) // <--
	RET                 // <--                                  // ret
